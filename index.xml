<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Walk on the Byte Side</title><link>https://ander94lakx.github.io/</link><description>Recent content on Walk on the Byte Side</description><generator>Hugo -- gohugo.io</generator><language>es-es</language><managingEditor>ander@protonmail.com (Ander Granado)</managingEditor><webMaster>ander@protonmail.com (Ander Granado)</webMaster><lastBuildDate>Sun, 11 Sep 2022 23:30:00 +0200</lastBuildDate><atom:link href="https://ander94lakx.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Análisis de malware (II) - Análisis estático básico: strings y metadatos</title><link>https://ander94lakx.github.io/blog/2022-09-11-malware-analysis-2/</link><pubDate>Sun, 11 Sep 2022 23:30:00 +0200</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-09-11-malware-analysis-2/</guid><description>Ha llegado el día. Es hora de retomar lo que comencé hace meses y continuar con la seria sobre análisis de malware. Esta es la segunda parte de una serie de artículos. En el articulo anterior hablaba sobre los conceptos básicos, los diferentes tipos de técnicas para analizar malware, como conseguir muestras y algunos programas básicos para realizar este tipo de análisis.
Antes de nada, es necesario recordad los diferentes tipos de análisis que existen.</description><content>&lt;p>Ha llegado el día. Es hora de retomar lo que comencé hace meses y continuar con la seria sobre análisis de malware. Esta es la segunda parte de una serie de artículos. En el &lt;a href="../2022-01-26-malware-analysis-1">articulo anterior&lt;/a> hablaba sobre los conceptos básicos, los diferentes tipos de técnicas para analizar malware, como conseguir muestras y algunos programas básicos para realizar este tipo de análisis.&lt;/p>
&lt;p>Antes de nada, es necesario recordad los diferentes tipos de análisis que existen. Básicamente se dividen en 4 tipos diferentes:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Análisis estático&lt;/strong>: consiste en analizar información sobre el malware sin analizar su código ni ejecutarlo: metadatos, firmas, formato y secciones del binario, etc.&lt;/li>
&lt;li>&lt;strong>Análisis dinámico&lt;/strong>: consiste en observar el comportamiento del malware mientras se ejecuta: ficheros con los que interactúa, llamadas al sistema, trafico de red, cambios en el registro, etc.&lt;/li>
&lt;li>&lt;em>Análisis de código&lt;/em>: consiste en observar el código y se distingue en dos tipos:
&lt;ul>
&lt;li>&lt;strong>Análisis estático de código&lt;/strong>: analizar el código sin ejecutarlo.&lt;/li>
&lt;li>&lt;strong>Análisis dinámico de código&lt;/strong>: analizar el código mientras se ejecuta, es decir, depurarlo.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>No hay una norma estricta sobre el orden en el que aplicar las técnicas o por donde empezar. Aun así, hay ciertas cosas que tienen sentido hacerlas antes que otras. Analizar código, por ejemplo, no es lo más sencillo de realizar, por lo que no suele ser lo primero que se hace. El análisis dinámico necesita capturar mucha información, por lo que si es algo que vamos a hacer nosotros en local, tiene sentido intentar tener un conocimiento básico sobre la muestra que se analiza para poder &amp;ldquo;centrar el tiro&amp;rdquo;: decidir que elementos monitorizar y priorizar que información analizar primero.&lt;/p>
&lt;p>El tipo de análisis más sencillo que se puede realizar es el &lt;strong>análisis estático&lt;/strong>. No requiere ni analizar el código ni tener que poner toda una serie de programas a monitorizar. Usando únicamente análisis estático se puede sacar mucha información sobre el tipo de archivo, metadatos con pistas interesantes, el tipo de malware que puede ser, etc.&lt;/p>
&lt;p>Por ello, este tipo de técnicas suelen ser las primeras a realizar ya que son rápidas de realizar y permiten &lt;strong>clasificar el malware&lt;/strong>. ¿En que consiste clasificar malware? Analizar malware sirve para, por un lado, ver de que tipo de malware se trata y como encaja dentro de todo el malware que existe (a que &amp;ldquo;familia&amp;rdquo; de malware pertenece) y, por otro lado, para entender como se comporta y aprender de ello. La primera de ellas es lo que se llama clasificación.&lt;/p>
&lt;p>Esto es porque, por lo general, las muestras de malware suelen ser variaciones de otras. En programación, cuanto más se pueda reciclar, mejor, y en el caso del malware no va a ser diferente. Buscando patrones, firmas y características que ya se han encontrado en otras muestras permite saber de qué tipo de malware se trata mucho antes de tener que ver cómo esta programado o cómo se comporta, ahorrando mucho tiempo. Además, si se sabe que tipo de malware es, analizar su código es más sencillo (ya se sabe las características y particularidades que se quieren buscar) y ya se pueden tener pistas sobre como se va a comportar basado en como se comportan malware similar.&lt;/p>
&lt;h1 id="requisitos">Requisitos&lt;/h1>
&lt;p>Con todo esto, vamos a ver como se puede obtener información básica de una muestra. Para esto, obviamente, se necesita una muestra de malware. Yo voy a usar una que ya analicé en su momento de un &lt;a href="https://bazaar.abuse.ch/sample/7faeb64c50cd15d036ca259a047d6c62ed491fff3729433fefba0b02c059d5ed/">ransomware Ryuk&lt;/a>. El hash SHA-256 de la muestra es el siguiente:&lt;/p>
&lt;pre tabindex="0">&lt;code>7faeb64c50cd15d036ca259a047d6c62ed491fff3729433fefba0b02c059d5ed
&lt;/code>&lt;/pre>&lt;p>Para esto vale cualquier muestra, solo que depende de cuál se use se va a obtener resultados diferentes. Obviamente, como las muestras cogidas de repositorios de malware como esta ya son conocidas, ya nos hemos comido el &lt;em>spoiler&lt;/em> sobre que tipo de muestra es. Analizando una muestra desconocida esto no pasaría. Aun asi, lo interesante es ver hasta que punto somos capaces nosotros mismos de sacar informacion de la muestra.&lt;/p>
&lt;p>Por otro lado, es necesario tener un entorno seguro donde analizar la muestra. Para ello, es necesario usar un entorno virtualizado. El el artículo anterior mencionaba varias opciones. Aunque en este caso la muestra sea para Windows, esta parte se puede hacer tanto con máquinas Linux como con Windows ya que, por el momento, no vamos a ejecutar nada. Para la parte dinámica es necesario tener una máquina virtual Windows. En mi caso, para mostrar un poco de todo, voy a usar tanto una máquina virtual Windows como una Linux, concretamente Remnux. Me gusta ir combinando las dos ya que hay herramientas que solo se encuentran en uno de los sistemas. Además, me siento más comodo con la terminal de Linux, pero a veces prefiero algunos programas para Windows. Mientras se use la misma muestra en ambos no hay problema. Podemos comprobar que tenemos la misma muestra en ambas basta con verificar la integraidad de la muestra con su hash.&lt;/p>
&lt;p>Ya con esto, podemos empezar a meterle mano a la muestra.&lt;/p>
&lt;h1 id="cálculo-de-hashes">Cálculo de hashes&lt;/h1>
&lt;p>Lo primero es calcular los hashes de la muestra. Si se obtiene de algún repo, ya se tiene el hash y simplemente es necesario comprobarlo para comprobar su integridad; o lo que es lo mismo, garantizar que tenemos la muestra que queríamos. Se puede realizar con alguna herramienta, como 7Zip o HashCalc para Windows o usar algún comando como los que ya vienen en algunos sistemas, como la mayoría de Linux.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-hashes-linux.png" alt="Hashes Linux" title="Cálculo de hashes en Linux">&lt;/p>
&lt;p>Si usamos varias máquinas, conviene hacer esto en todas para asegurar que se tiene la misma muestra cargada en todas las máquinas.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-hashes-windows.png" alt="Hashes Windows" title="Cálculo de hashes en Windows">&lt;/p>
&lt;p>Vale, ya tenemos la muestra en nuestro sistema y lista para analizar. ¿Por dónde se puede empezar?&lt;/p>
&lt;p>En realidad, como comentaba, no hay un orden definido para esto, pero si que es cierto que hay algunos procesos básicos que podemos realizar muy rápidamente y que suelen ser los primeros que se realizan, tanto por lo fáciles que son como por la información que pueden aportar a la hora de realizar otro tipo de análisis más complejos, como los análisis de código o de comportamiento. En esta parte vamos a realizar un par de técnicas básicas de análisis estático: &lt;strong>analizar strings y metadatos&lt;/strong>.&lt;/p>
&lt;h1 id="tipo-de-muestra">Tipo de muestra&lt;/h1>
&lt;p>Aunque en este caso se sabe que es una muestra de malware para Windows, por regla general conviene, antes que nada, determinar qué tipo de muestra tenemos ante manos.Si la muestra fuese desconocida, esto nos permitiria saber si se trata de un binario o no y, para el primer caso, ver para que arquitectura y sistema operativo. Dependiendo de esto, sera necesario unas máquinas, herramientas y técnicas u otras. La forma mas sencilla es usar algo como el comando &lt;code>file&lt;/code> de Linux.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-file.png" alt="Tipo de archivo" title="Tipo de archivo">&lt;/p>
&lt;p>Con esto comprobamos lo que ya sabiamos, que es un ejecutable para Windows de 32 bits. Vemos que menciona que es un ejecutable PE32. Más adelante indagaremos en el formato de los binarios PE32 y como analizar mas en detalle su estructura para obtener informacion de este tipo de muestras. De momento, ya que sabemos que es un binario, vamos a intentar extraer sus strings.&lt;/p>
&lt;h1 id="análisis-de-strings">Análisis de strings&lt;/h1>
&lt;p>Cualquiera que haya programado alguna vez ha tenido que leer código. De hecho, lo normal es pasarse más tiempo leyendo código que escribiéndolo. Cualquier programador con un mínimo de experiencia se ha tenido que sentar alguna vez delante de alguna &lt;em>codebase&lt;/em> para ver como funciona algún programa; porque le han pasado ese proyecto en el trabajo, porque ha &lt;em>forkeado&lt;/em> un proyecto y quiere ampliarlo o porque esta leyendo una respuesta de Stack Overflow. Sea por el motivo que sea, una de las formas más fáciles de entender lo que hace el código es fijarse en los mensajes que muestra o en los strings que contiene. Esos prints y logs que informan al usuario y al desarrollador también informan a otros programadores. Por ello, una de las cosas más básicas que se puede hacer al analizar malware es analizar strings.&lt;/p>
&lt;p>Pero hay un problema. Normalmente, las muestras de malware que vamos a encontrar son muestras compiladas. No nos van a alegrar el día enseñándonos el código. asi que, ¿Cómo lo hacemos? ¿Ingeniería inversa?&lt;/p>
&lt;p>Sí y no. Aunque haciendo reversing podemos obtener un código desensamblado o incluso un código a más alto nivel, todavía no es necesario. Un string no deja de ser un &amp;ldquo;churro&amp;rdquo; de bytes con una codificación concreta, como ASCII o UTF-8 por lo que con intentar pasar los bytes que tenemos a una codificación concreta para ver si conseguimos algo legible, podremos ser capaces de encontrar esos strings.&lt;/p>
&lt;p>Obviamente, no hay que andar haciendo esto a mano. Hay muchas herramientas para hacer esto. Muchos editores hexadecimales tienen opciones para búsquedas de strings. En Windows, la manera más sencilla es usar &lt;strong>&lt;code>strings.exe&lt;/code>&lt;/strong>, una &lt;a href="https://docs.microsoft.com/en-us/sysinternals/">SysInternal&lt;/a> de Windows que extrae strings de un binario. Las SysInternal de Windows son herramientas muy potentes para tanto para administradores de sistemas Windows como para analistas de malware. Tenerlas en tu arsenal es un &lt;em>must&lt;/em>. El equivalente de esta herramienta en Linux es el comando &lt;strong>&lt;code>strings&lt;/code>&lt;/strong>.&lt;/p>
&lt;p>Ejecutándola con el binario podemos ver los strings que detecta (he acortado la salida ya que da mucha basura y falsos positivos).&lt;/p>
&lt;pre tabindex="0">&lt;code>!This program cannot be run in DOS mode.
.text
.rdata
@.data
.rsrc
DllUnregisterServer
catsrv.dll
IsProcessorFeaturePresent
GlobalUnlock
GetUserDefaultUILanguage
GetCurrentProcess
QueryPerformanceCounter
GetFileAttributesW
LoadLibraryExW
CloseHandle
InitializeCriticalSectionAndSpinCount
InitializeSListHead
GetCurrentThreadId
LoadLibraryA
TerminateProcess
CreateEventW
GetModuleHandleW
GetProcAddress
SetUnhandledExceptionFilter
VirtualProtectEx
UnhandledExceptionFilter
GlobalAlloc
GlobalLock
DeleteCriticalSection
IsDebuggerPresent
GetModuleFileNameW
GetCurrentProcessId
GetLastError
OutputDebugStringW
GetStartupInfoW
kernel32.dll
DllGetClassObject
msident.dll
CoUninitialize
CoInitialize
CoCreateGuid
ole32.dll
UuidCreate
rpcrt4.dll
CloseClipboard
EnableWindow
DrawIcon
IsIconic
EmptyClipboard
OpenClipboard
GetClientRect
SendMessageW
GetSystemMenu
GetParent
GetForegroundWindow
SetClipboardData
LoadIconW
AppendMenuW
GetSystemMetrics
user32.dll
&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;UTF-8&amp;#39; standalone=&amp;#39;yes&amp;#39;?&amp;gt;
&amp;lt;assembly xmlns = &amp;#39;urn:schemas-microsoft-com:asm.v1&amp;#39; manifestVersion = &amp;#39;1.0&amp;#39;&amp;gt;
&amp;lt;trustInfo xmlns = &amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&amp;gt;
&amp;lt;security&amp;gt;
&amp;lt;requestedPrivileges&amp;gt;
&amp;lt;requestedExecutionLevel level = &amp;#39;asInvoker&amp;#39; uiAccess = &amp;#39;false&amp;#39; /&amp;gt;
&amp;lt;/requestedPrivileges&amp;gt;
&amp;lt;/security&amp;gt;
&amp;lt;/trustInfo&amp;gt;
&amp;lt;/assembly&amp;gt;
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA0
070615000000Z
120614235959Z0\1
VeriSign, Inc.1402
+VeriSign Time Stamping Services Signer - G20
http://ocsp.verisign.com0
&amp;#34;http://crl.verisign.com/tss-ca.crl0
TSA1-20
Western Cape1
Durbanville1
Thawte1
Thawte Certification1
Thawte Timestamping CA0
031204000000Z
131203235959Z0S1
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA0
http://ocsp.verisign.com0
0http://crl.verisign.com/ThawteTimestampingCA.crl0
TSA2048-1-530
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA0
Moscow1
Moscow1
Kaspersky Lab1&amp;gt;0&amp;lt;
5Digital ID Class 3 - Microsoft Software Validation v21
Technical dept1
Kaspersky Lab0
3http://csc3-2009-2-crl.verisign.com/CSC3-2009-2.crl0D
https://www.verisign.com/rpa0
http://ocsp.verisign.com0?
3http://csc3-2009-2-aia.verisign.com/CSC3-2009-2.cer0
VeriSign, Inc.1705
.Class 3 Public Primary Certification Authority0
090521000000Z
190520235959Z0
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA0
https://www.verisign.com/cps0*
https://www.verisign.com/rpa0
#http://logo.verisign.com/vslogo.gif0
http://ocsp.verisign.com01
http://crl.verisign.com/pca3.crl0)
Class3CA2048-1-550
xEv1
Washington1
Redmond1
Microsoft Corporation1)0&amp;#39;
Microsoft Code Verification Root0
060523170129Z
160523171129Z0_1
VeriSign, Inc.1705
.Class 3 Public Primary Certification Authority0
Dhttp://crl.microsoft.com/pki/crl/products/MicrosoftCodeVerifRoot.crl0
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA
100907170408Z0#
&lt;/code>&lt;/pre>&lt;p>Hay strings que van a aparecer prácticamente siempre, como los de las cabeceras DOS (ese &lt;code>&amp;quot;!This program cannot be run in DOS mode&amp;quot;&lt;/code> es un mecanismo de compatibilidad del formato PE que lleva arrastrando Microsoft desde hace décadas) o algunos que son simplemente falsos positivos. Aquí lo interesante es ver si alguno de esos strings da algún tipo de información sobre lo que hace el binario.&lt;/p>
&lt;p>Entre todos los strings que se observan, se pueden ver dos tipos de strings:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Referencias a librerías y a funciones&lt;/strong>. En un binario, es normal encontrar referencias a funciones de librerías externas, ya que los programas suelen necesitar librerias externas (ya sean del sistema o no) para poder realizar ciertas cosas. Estas funciones pueden dar pistas sobre las capacidades que tiene el binario, es decir, que cosas puede hacer; por ejemplo, si contiene funciones para interactuar con ficheros, es que puede interactuar con ficheros. Aun así, esto no muestra todas las capacidades que puede tener un binario, ya que hay mecanismos para ocultar esto, los cuales veremos más adelante.&lt;/li>
&lt;li>&lt;strong>Información sobre algún tipo de certificado&lt;/strong> (menciones a VeriSign, menciones a Microsoft, etc.). Esto puede indicar que el binario se encuentra firmado. Firmar un binario es una forma de eludir sistemas antivirus. Podemos verificar si esta firmado con diferentes herramientas.&lt;/li>
&lt;/ul>
&lt;p>Como se puede ver en este caso, por desgracia, los strings no parecen dar demasiada información sobre qué hace la muestra. No se han detectado strings propios del programa, como mensajes de salida, variables del programa, etc. En estos casos hay dos opciones: o la muestra no contiene strings interesantes o están ofuscadas. Sea cual sea, conviene siempre probar varios métodos para la extraction de string. Usar la SysInternal es el más sencillo de todos. Si usamos varias aplicaciones, como por ejemplo PEStudio, y comparamos resultados entre ellas, puede que saquemos mas resultados.&lt;/p>
&lt;p>Pero, si están ofuscadas ¿cómo se pueden detectar? Hay herramientas pensadas para la detección de este tipo de strings. Si se ha usado algún tipo de mecanismo común, como usar un empaquetador de código (como UPX) o técnicas de ofuscación sencillas (como usar XOR sobre los datos en binario) este tipo de herramientas los pueden detectar. Se pueden utilizar herramientas como &lt;strong>FLOSS&lt;/strong> para intentar buscar este tipo de datos.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-strings-floss.png" alt="FLOSS strings" title="FLOSS para el análisis de strings">&lt;/p>
&lt;p>Por no llenar el articulo de strings, no he puesto la salida de FLOSS, pero la herramienta no detecta más strings de las detectadas por &lt;code>strings&lt;/code>. Por el momento, se ve que con esta muestra no hemos tenido mucha suerte. El hecho de no encontrar strings tan fácilmente puede ser un indicador de uso de técnicas de ofuscación. Ofuscar tanto los datos como el código es normal en el mundo del malware (y no solo en el mundo del malware, este tipo de técnicas también se emplean para proteger propiedad intelectual, por ejemplo). De todas maneras, en las próximas partes nos meteremos en detalle más formas para detectar ofuscaciones, como el análisis del la secciones del binario y el análisis de entropía.&lt;/p>
&lt;h1 id="metadatos">Metadatos&lt;/h1>
&lt;p>Como esto esta quedando muy largo, en esta parte solo voy a tratar otro punto básico más: el análisis de metadatos. Las muestras de malware, al igual que cualquier archivo, pueden contener metadatos interesantes. Digo &amp;ldquo;pueden&amp;rdquo; porque puede darse el caso de que hayan sido eliminados, sobrescritos por otro sistema o incluso deliberadamente modificados para dificultar el análisis. Aun así, siempre conviene analizarlos para ver si se encuentra información.&lt;/p>
&lt;p>Hay mil aplicaciones para analizar metadatos. La forma más sencilla (y que todos hemos usado alguna vez) es la típica de clicar en el archivo y ver sus propiedades. También hay aplicaciones que permiten hacer esto y muestran la información de manera más detallada y organizada. A mi personalmente me gusta usar &lt;strong>PEStudio&lt;/strong> (que entre otras muchas cosas, también muestra los metadatos) y &lt;strong>ExifTool&lt;/strong>, que es muy conocida ya no solo para analizar binarios como para analizar cualquier archivo (como su nombre indica, es muy común para sacar metadatos de fotografías).&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-metadata-remnux.png" alt="Metadatos ExifTool" title="Metadatos con ExifTool">&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-metadata-pestudio.png" alt="Metadatos PEStudio" title="Metadatos con PEStudio">&lt;/p>
&lt;p>En los metadatos no vemos nada muy relevante, peo sí que se muestra información sobre un certificado de Microsoft, ya que el binario parece estar firmado. Podemos comprobar esto de varias maneras como, por ejemplo, en las propiedades del archivo o mediante funciones como &lt;code>Get-AuthenticodeSignature&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-certificate-properties.png" alt="Certificado Propiedades" title="Comprobación del certificado en las propiedades del archivo">&lt;/p>
&lt;p>Si se hace a traves de las propiedades del archivo, en caso de que este tuviera un certificado válido, las propiedades mostrarían una nueva pestaña con información sobre el certificado. En este caso, no parece haber certificado.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-certificate-powershell.png" alt="Certificado PowerShell" title="Comprobación del certificado mediante PowerShell">&lt;/p>
&lt;p>Comprobando con PowerShell se obtiene le mismo resultado. Esto no tiene porque indicar que no tiene firma, también puede deberse a que la firma se encuentre caducada o que el certificado usado no sea valido. Aunque se haya firmado con un supuesto certificado de Microsoft, si estos certificados se ven comprometidos (cosa que ya ha pasado en alguna ocasión) se revocan, de tal manera que los sistemas no los den por válidos. En este caso, por la información de los metadados, parece tratarse de eso.&lt;/p>
&lt;h1 id="conclusión">Conclusión&lt;/h1>
&lt;p>Comenzar a analizar malware es una tarea relativamente sencilla (tranquilos, que se va a complicar). Aunque de momento no hemos obtenido mucha información, el hecho de no encontrar pistas en los strings o el encontrar un certificado sospechoso ya da pistas indicando que el archivo es malicioso (en este caso ya lo sabíamos, pero al analizar muestras desconocidas son pistas interesantes).&lt;/p>
&lt;p>De todas maneras, el análisis estático que se puede realizar no acaba más que comenzar. En la siguiente parte tengo intención de indagar más en este tipo de técnicas, analizando técnicamente el binario y sus secciones y entrando más en detalle sobre como detectar técnicas de ofuscación, hablando de conceptos como de entropía.&lt;/p>
&lt;p>Pero por el momento, &lt;em>stay safe &amp;amp; happy hacking&lt;/em>!&lt;/p></content></item><item><title>Migración a Hugo</title><link>https://ander94lakx.github.io/blog/2022-08-14-blog-update-hugo/</link><pubDate>Sun, 14 Aug 2022 14:49:32 +0200</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-08-14-blog-update-hugo/</guid><description>Kaixo, aspaldiko! Llevaba muchísimo tiempo sin postear nada y eso que tengo varias ideas en mente y otras que deje a medias (como la serie de análisis de malware, por ejemplo) y ya era hora de retomarlo.
Antes de nada, creo que ya tocaba renovar un poco el blog. Hace bastante tiempo lo migré de Jekyll a Gatsby para modernizarlo un poco, pero llevaba un tiempo queriendo usar algo más sencillo.</description><content>&lt;p>Kaixo, aspaldiko! Llevaba muchísimo tiempo sin postear nada y eso que tengo varias ideas en mente y otras que deje a medias (como la serie de análisis de malware, por ejemplo) y ya era hora de retomarlo.&lt;/p>
&lt;p>Antes de nada, creo que ya tocaba renovar un poco el blog. Hace bastante tiempo lo migré de Jekyll a Gatsby para modernizarlo un poco, pero llevaba un tiempo queriendo usar algo más sencillo. No es que Gatsby sea malo en si, pero me parece que genera demasiados archivos para algo que debería ser sencillo, por lo que busque alternativas.&lt;/p>
&lt;p>Hace un tiempo que conocía &lt;a href="https://gohugo.io/">Hugo&lt;/a>, que se publicita como el generador de webs más rápido del mundo, usando Go por detrás. La verdad es que la velocidad no me importa en exceso, pero si me genera menos archivos y es mas sencillo de utilizar, pues mejor. A parte de que, para poder meter mano a Gatsby sin saber mucho de React se me hacia algo cuesta arriba.&lt;/p>
&lt;p>Una de las cosas buenas que tiene Hugo es su sistema para añadir temas. clonando repos o añadiéndolos como submódulos se puede cambiar el tema y es bastante más fácil de manejar que en Gatsby. Además, el tema &amp;ldquo;terminal&amp;rdquo; que he puesto creo que queda bastante bien, es minimalista y tiene ese toque retro que me gusta, sin dejar de ser moderno. Si en un futuro quiero cambiar el aspecto, es tan sencillo como añadir otro tema y listo. No es que yo sea muy de frontend, asi que el poder mantener un buen aspecto sin tener que tocar mucho es toda una ventaja.&lt;/p>
&lt;p>Por otro lado, otra de las ventajas que tiene es que basta con montarte tu Action en el repo de GitHub para buildearlo y pushearlo a la rama de GitHub Pages y listo, haciéndolo muy rápido. Es pushear los cambios y olvidarte.&lt;/p>
&lt;p>Aun asi, todo esto es simplemente para darle un lavado de cara. Lo más importante de un blog siempre es su contenido, por lo que esto no es más que una puesta a punto para volver a retomar el blog, que falta que hacia ya.&lt;/p>
&lt;p>En los próximos días iré subiendo algunas cositas para ir cogiendo ritmo.&lt;/p>
&lt;p>¡Hasta pronto!&lt;/p>
&lt;p>Happy hacking!&lt;/p></content></item><item><title>Cómo sacar tu Top de canciones (o la información que sea) de tu cuenta de Spotify</title><link>https://ander94lakx.github.io/blog/2022-02-13-spotify-data-top-songs/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-02-13-spotify-data-top-songs/</guid><description>Estoy con el scrapping muy pesado, lo sé. Esta vez es algo un poco diferente. No es web scrapping al uso, sino un pequeño ejemplo sobre cómo sacar información sobre los datos de uno mismo. Se pueden sacar cosas muy interesantes de los datos que generamos a diario. En mi caso, por ejemplo, uso Spotify a diario para escuchar música. No salgo de casa sin unos auriculares y en mi casa llevo los cascos hasta para cagar, asi que genero cierta información al usar Spotify.</description><content>&lt;p>Estoy con el scrapping muy pesado, lo sé. Esta vez es algo un poco diferente. No es web scrapping al uso, sino un pequeño ejemplo sobre cómo sacar información sobre los datos de uno mismo. Se pueden sacar cosas muy interesantes de los datos que generamos a diario. En mi caso, por ejemplo, uso Spotify a diario para escuchar música. No salgo de casa sin unos auriculares y en mi casa llevo los cascos hasta para cagar, asi que genero cierta información al usar Spotify.&lt;/p>
&lt;h2 id="descargar-tu-información">Descargar tu información&lt;/h2>
&lt;p>Muchas aplicaciones dejan descargar a los propios usuarios la información que generan. Para los ciudadanos europeos debería decir que todas, ya que es un derecho que te otorga el &lt;a href="https://support.spotify.com/es/article/gdpr-article-15-information/">artículo 15&lt;/a> del RGPD de la Unión Europea. Esto hace que prácticamente todos los servicios online te dejen descargar una copia con tus datos, al menos en esta parte del globo.&lt;/p>
&lt;p>Eso es muy interesante ya que te permite sacar información que las aplicaciones y servicios tienen sobre tí pero que, de por si, no te dejan ver a través de sus interfaces. Por ejemplo, en el caso de Spotify, te deja descargar tus &lt;a href="https://support.spotify.com/es/article/data-rights-and-privacy-settings/">datos principales&lt;/a>, entre los que puedes ver, entre muchas cosas, el historial de reproducción de los últimos 365 días. Hya que matizar que, en el caso de Spotify, los datos que te otorgan con la herramienta que tienen para bajarte los datos no son completos, pero puedes pedir absolutamente todo &lt;a href="mailto:privacy@spotify.com">contactando directamente&lt;/a> con ellos.&lt;/p>
&lt;p>De esta manera, algo que no se puede ver desde la app de Spotify se puede hacer a través de los datos que te permiten descargar. Normalmente este tipo de datos suelen venir en algún tipo de formato como JSON o XML para poder ser tratados programáticamente. A veces, incluso dejan elegir entre formatos, como por ejemplo el caso de Instagram, en el que se puede bajar una version en HTML (muy útil si se quiere tener una copia como backup) o en JSON (si lo que se quiere es tratar esos datos de alguna manera).&lt;/p>
&lt;h2 id="sacar-lo-más-escuchado-de-la-información-de-spotify">Sacar lo más escuchado de la información de Spotify&lt;/h2>
&lt;p>Volviendo a Spotify, se pueden sacar muchísima información de esos datos. En mi caso, como prueba para comenzar a trastear con los datos, simplemente he programado un script para poder ver cuál es mi top de canciones y artistas más escuchados. Alguno podría pensar que esto ya te lo da Spotify en el ¨wrapped¨ que hace cada año o en alguna lista que genera. En parte es cierto, pero te lo da &amp;ldquo;a su manera&amp;rdquo;. Es decir, igual puedes saber tu Top 5 de artistas más escuchados, pero no el Top 10, ni saber cuántas veces has escuchado a ese artista, ni cuánto has escuchado a un artista que no está en el top, etc. El potencial de tener todos los datos en tu mano es que puedes &lt;strong>sacar la información que quieras y como quieras&lt;/strong>.&lt;/p>
&lt;p>En este caso he probado con los datos básicos, que tienen información limitada. Si se pide la copia con toda la información, se pueden obtener muchos más datos. En la &lt;a href="https://support.spotify.com/es/article/understanding-my-data/">documentación&lt;/a> de Spotify se puede ver exactamente que datos te ofrece en ambos casos. Para el caso con los datos básicos, Spotify te da un zip con un puñado de archivos JSON.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/spotify_data.png" alt="Datos de Spotify" title="Datos básicos proporcionados por Spotify">&lt;/p>
&lt;p>Entre los archivos que da Spotify, los que interesan para esta prueba son los que se llaman &lt;code>StreamingHistory[x].json&lt;/code>. Estos archivos contienen el historial de reproducción. La información respecto a la canción es bastante limitada pero la justa para saber cual es. El archivo tiene un formato como el siguiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 11:10&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Hüsker Dü&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Don&amp;#39;t Want to Know If You Are Lonely&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">212426&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:16&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Go With The Flow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">4890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:23&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Go With The Flow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">190646&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:24&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Make It Wit Chu&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">19403&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Y así hasta el infinito. Te da el timestamp, nombre de la canción y artista y el tiempo de reproducción. Esto último es interesante porque puedes poner un mínimo para considerar que la canción haya sido escuchada, por ejemplo. También se puede jugar con el timestamp para ver cuando has escuchado mas o menos música. Las posibilidades son amplias.&lt;/p>
&lt;p>Con esto, el script que he creado para sacar el top de canciones y artistas más escuchados es el siguiente:&lt;/p>
&lt;p>&lt;code>gist:ander94lakx/63776dacd6e986d935b9f01fff755921#spotify_top_songs_and_artists.py&lt;/code>&lt;/p>
&lt;p>No creo que merezca la pena entrar en detalle en el código, ya que es muy sencillo y la mayoría se explica solo. Es básicamente en a función que realiza una serie de pasos que se pueden resumir en los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>Gestionar un argumento para configurar el tamaño del Top.&lt;/li>
&lt;li>Leer los archivos y cargar la información de los JSON en diccionarios.&lt;/li>
&lt;li>Realizar las cuentas sobre la información cargada.&lt;/li>
&lt;li>Ordenar, preparar y mostrar el top de canciones y artistas.&lt;/li>
&lt;/ol>
&lt;p>Probablemente se pueda mejorar de muchas maneras. Se podría unificar la parte en la que se coge los datos con la parte en la que se calcula las reproducciones, pero quería separarlo para que fuera más sencillo de entender. Por otro lado, mi Python no es perfecto y alguna cosa con los sets (y otras muchas cosas más) seguro que se pueden hacer mejor.&lt;/p>
&lt;h2 id="conclusiones">Conclusiones&lt;/h2>
&lt;p>Tener los datos que generas en una aplicación te permite sacar mucha información. Las aplicaciones y servicios lo saben y utilizan esos datos para sacar información para beneficiarse. Que menos que, ya que ellos tratan la información de sus usuarios, que dejen hacer lo mismo a sus propios usuarios.&lt;/p>
&lt;p>Ello, además, permite extender las capacidades que dan las propias aplicaciones. En el caso de Spotify, uno mismo podría hacer un análisis sobre la música que escucha, cómo la escucha o como ha ido cambiando en el tiempo, cosa que Spotify no ofrece a los usuarios. En el caso de otras aplicaciones se puede hacer mas de lo mismo. El hecho de poder obtener tu propia información es un primer paso para poder tratarla a tu manera.&lt;/p>
&lt;p>Seguro que hay mil ejemplos de casos interesantes en los que se puede usar este tipo de información que generan las aplicaciones. Si estás leyendo esto, te invito a que te descargues tu información de las aplicaciones que usas, le eches un vistazo y pienses en que usos interesantes puedes darle. La información es poder y que menos que que los usuarios podamos tener también ese poder.&lt;/p>
&lt;p>¡No paréis de descargaros lo que os pertenece!&lt;/p>
&lt;p>Happy hacking!&lt;/p></content></item><item><title>Cómo automatizar la búsqueda de piso con un bot de Telegram</title><link>https://ander94lakx.github.io/blog/2022-02-05-bot-telegram-buscar-piso/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-02-05-bot-telegram-buscar-piso/</guid><description>Estoy buscando piso y es un proceso de mierda. Hay una cantidad extrañamente escasa de pisos en mi ciudad y los que hay desaparecen rápidamente.
Me da pereza meterme todo el rato a buscar piso. En realidad no es algo tan complicado, pero a veces estoy ocupado y se me pasa mirar ese día, o estoy fuera y con el móvil es más engorroso.
Llevaba tiempo queriendo probar a hacer un bot de Telegram.</description><content>&lt;p>Estoy buscando piso y es un proceso de mierda. Hay una cantidad extrañamente escasa de pisos en mi ciudad y los que hay desaparecen rápidamente.&lt;/p>
&lt;p>Me da pereza meterme todo el rato a buscar piso. En realidad no es algo tan complicado, pero a veces estoy ocupado y se me pasa mirar ese día, o estoy fuera y con el móvil es más engorroso.&lt;/p>
&lt;p>Llevaba tiempo queriendo probar a hacer un bot de Telegram. No sabía que hacer exactamente, pero el otro día se me iluminó la bombilla. As que he creado un bot que me avisa de los pisos que hay en mi ciudad disponibles.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/scraping_telegram_python_bot.jpg" alt="Scraping Python Telegram bot" title="Scraping Telegram bot hecho en Python">&lt;/p>
&lt;p>Esto tiene dos partes. Una es la parte de web scraping. Esto es básicamente automatizar la extracción de información de sitios web. Hoy en dia casi todo se hace desde internet y buscar piso no iba a ser menos. Prácticamente todas las inmobiliarias locales y los particulares que alquilan piso cuelgan sus anuncios en alguna plataforma como Idealista o Fotocasa, así que consultando ahí puedo ir viendo que opciones nuevas van apareciendo. Es básicamente lo que estaba haciendo hasta ahora a mano y sin la constancia suficiente. Automatizándolo con web scraping me permite obtener toda esa información de un vistazo.&lt;/p>
&lt;p>La otra parte es la del bot de Telegram. Hasta hace dos días no tenia ni idea de como iba. Básicamente Telegram tiene una API cojonuda para poder hacer de todo con ella. Se pueden crear bots que se ejecuten donde sea para comunicarse directamente con los usuarios, escribir en chats o canales y realizar mil cosas. A parte, hay un &lt;a href="https://github.com/python-telegram-bot/python-telegram-bot">wrapper para Python&lt;/a> muy bueno con el que se puede utilizar la API desde Python de manera muy sencilla.&lt;/p>
&lt;h2 id="parte-1-web-scraping-con-selenium">Parte 1: web scraping con Selenium&lt;/h2>
&lt;p>No es la primera vez que hago web scraping. Hace tiempo hice un script que permitía scrapear instagram para descargar todas las imágenes de un usuario. Podéis echar un vistazo al &lt;a href="https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/">post&lt;/a> que hice o al &lt;a href="https://github.com/ander94lakx/InstaBot">código&lt;/a> del bot (es un bot, pero no es un bot de Telegram, ojo).&lt;/p>
&lt;p>Cuando hice ese script utilicé &lt;a href="https://www.selenium.dev/">Selenium&lt;/a>, que es probablemente la mejor herramienta para web scraping que existe. No sirve solo para eso, pero permite automatizar el manejo de navegadores. Con esto lo que se puede hacer, es abrir webs, navegar por ellas, realizar acciones y extraer información de ellas programáticamente. Esto es mucho mejor que mandar directamente request con una librería para realizar peticiones, ya que al lanzar realmente una instancia de un navegador, se pueden saltar medidas que algunos sitios web tienen para bloquear mecanismos automatizados. La pega que tiene es que, al tener que abrir un navegador, no se puede ejecutar en un entorno que no tenga pantalla (aunque esto se puede solucionar fácil con librerías que simulan pantallas como &lt;a href="https://pypi.org/project/PyVirtualDisplay/">PyVirtualDisplay&lt;/a>).&lt;/p>
&lt;p>Con las herramientas listas e instaladas, solo queda usar Selenium para comenzar a hacer web scraping. En este caso lo simple es mejor. en vez de pasarle la URL base de un sitio de búsqueda de pisos, se puede sacar las URL con los parámetros para filtrar la búsqueda. En mi caso, y poniendo Idealista como ejemplo, la URL sería algo así:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>https://www.idealista.com/alquiler-viviendas/vitoria-gasteiz-alava/?ordenado-por&lt;span style="color:#f92672">=&lt;/span>precios-asc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Como se puede ver, ya estoy filtrando por mi ciudad, a parte de que ordena por precio para que aparezcan los más baratos primero (no hay mucha pasta por aquí). Esto se podría acotar mucho más. Como la mayoría de sitios de este tipo usan los parámetros de búsqueda en la propia URL (algo muy útil para poder después guardar marcadores con ello), se puede ahorrar muchísimo trabajo de scraping solo con elegir la URL adecuada.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/idealista_web.png" alt="Resultados de Idealista" title="Resultados de la búsqueda en Idealista">&lt;/p>
&lt;p>Con eso en mente, he creado una sencilla función que permite hacer web scraping para obtener los pisos. Le he puesto una opción para filtrar por precio (aunque es algo que se puede hacer también a través de la URL). El código es el siguiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scrap_idealista&lt;/span>(max_price):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver &lt;span style="color:#f92672">=&lt;/span> initialize_driver(IDEALISTA_URL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scroll_down_and_up(driver)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Be kind and accept the cookies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_id(&lt;span style="color:#e6db74">&amp;#39;didomi-notice-agree-button&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#75715e"># No cookies button, no problem!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Find each flat element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements &lt;span style="color:#f92672">=&lt;/span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//*[@id=&amp;#34;main-content&amp;#34;]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> items &lt;span style="color:#f92672">=&lt;/span> elements&lt;span style="color:#f92672">.&lt;/span>find_elements_by_class_name(&lt;span style="color:#e6db74">&amp;#39;item-multimedia-container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the link for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;./div/a[@href]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> link&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the price for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>search(&lt;span style="color:#e6db74">&amp;#39;.*&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">n(.*)€\/mes&amp;#39;&lt;/span>, item&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price_str &lt;span style="color:#f92672">=&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price &lt;span style="color:#f92672">=&lt;/span> int(price_str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> price &lt;span style="color:#f92672">&amp;lt;=&lt;/span> max_price:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>append({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>: link,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;price&amp;#39;&lt;/span>: price,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>screenshot_as_png,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image_name&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>id &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.png&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>quit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> flat_list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aquí se ven varias cosas, pero por lo general es bastante sencillo de entender. Antes que nada, se carga el driver de Selenium y se hace scroll por toda la página. Lo primero carga la web y permite tener todo listo para comenzar a buscar. El scroll es debido a que, en ocasiones, las webs van ofreciendo contenido a medida que el usuario va haciendo scroll, por lo que hacer un scroll rápido antes de comenzar a sacar información está muy bien.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">initialize_driver&lt;/span>(url):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver &lt;span style="color:#f92672">=&lt;/span> webdriver&lt;span style="color:#f92672">.&lt;/span>Chrome(executable_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./chromedriver.exe&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>get(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>set_window_position(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>set_window_size(&lt;span style="color:#ae81ff">1920&lt;/span>, &lt;span style="color:#ae81ff">1080&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> driver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Usar Selenium es muy sencillo. En este caso estoy usando el driver para Chrome, que tengo justo en mi directorio, por conveniencia. Tras ello, cargar la URL y configurar la ventana para que tenga un tamaño decente. Esto es importante, porque los elementos estarán colocados de diferente manera en función del tamaño de la ventana. El diseño responsive está muy bien, pero es uno de los peores enemigos del &lt;em>scrapper&lt;/em>, así que poner una resolución consistente es importante para obtener siempre los mismos resultados.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scroll_down_and_up&lt;/span>(driver):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#39;window.scrollTo(0, document.body.scrollHeight);&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#39;window.scrollTo(0, 0);&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>En lo que respecta al scroll aquí no hay nada especial. Un poco de JS y listo.&lt;/p>
&lt;p>La chicha está después. Lo primero, aceptar las cookies para poder navegar por el sitio y que no se vea nada raro. Aquí es donde se puede ver la potencia de Selenium&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_id(&lt;span style="color:#e6db74">&amp;#39;didomi-notice-agree-button&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Se explica solo. Se coge el elemento con ese ID, que en este caso es un botón, y se click. Lo siguiente es buscar los elementos con la información de los pisos. Esas tarjetitas que aparecen en lista. Como todos los elementos de una web, tienen clases o atributos que los identifican.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>elements &lt;span style="color:#f92672">=&lt;/span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//*[@id=&amp;#34;main-content&amp;#34;]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>items &lt;span style="color:#f92672">=&lt;/span> elements&lt;span style="color:#f92672">.&lt;/span>find_elements_by_class_name(&lt;span style="color:#e6db74">&amp;#39;item-multimedia-container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>En este caso he hecho búsquedas con XPath y a través de los nombres de las clases. Si se ve la web de idealista, se puede sacar esta información. En cada web será diferente. Lo bueno de Selenium es que te permite obtener elementos y después buscar dentro de ellos. Así, se puede ir paso a paso hasta llegar a donde se quiere.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/idealista_scraping.png" alt="Scraping en Idealista" title="Elementos a buscar con Selenium">&lt;/p>
&lt;p>Buscar a través del id y de las clases es sencillo. Buscar a través de XPath es más complicado pero muy potente. Esto se puede simplificar con una extensión como &lt;a href="https://github.com/trembacz/xpath-finder">xPath Finder&lt;/a>, que te permite obtener el XPath de cualquier elemento de una web.&lt;/p>
&lt;p>Con ello ya se tienen una lista de items, que son cada una de las tarjetitas esas. Aquí solo queda sacar la información que se quiera sacar.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the link for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;./div/a[@href]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> link&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the price for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>search(&lt;span style="color:#e6db74">&amp;#39;.*&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">n(.*)€\/mes&amp;#39;&lt;/span>, item&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price_str &lt;span style="color:#f92672">=&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price &lt;span style="color:#f92672">=&lt;/span> int(price_str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> price &lt;span style="color:#f92672">&amp;lt;=&lt;/span> max_price:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>append({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>: link,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;price&amp;#39;&lt;/span>: price,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>screenshot_as_png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Para esto hay muchas formas. Selenium te permite sacar el elemento como imagen, por lo que para después enviarlo de esa manera puede estar muy bien. En mi caso saco el piso como imagen (para enviar después por Telegram así), el precio (para ver que no se pase del tope establecido) y el link, para enviarlo junto a cada imagen para poder meterme en el piso que me interesa. El nombre de la imagen me permite después gestionar las imágenes para enviarlas por Telegram.&lt;/p>
&lt;p>Y esto es todo, así de sencillo. Ya solo hay que enviar esa información por Telegram.&lt;/p>
&lt;h2 id="parte-2-crear-un-bot-de-telegram">Parte 2: crear un bot de Telegram&lt;/h2>
&lt;p>Crear un bot de Telegram es tan sencillo como usar &lt;a href="https://t.me/botfather">BotFather&lt;/a>, el bot que te permite crear bots. Tras crear un bot con él, te da un token que es lo que te permite hacer lo que quieras con la API. La creación del bot es trivial, consiste en hablar con el bot.&lt;/p>
&lt;p>Una vez teniendo un token se puede hacer uso del &lt;a href="https://github.com/python-telegram-bot/python-telegram-bot">wrapper para Python&lt;/a> que he mencionado. Instalar con &lt;code>pip&lt;/code> y listo. Del wrapper he utilizado lo siguiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> telegram
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram &lt;span style="color:#f92672">import&lt;/span> Bot, Update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> Updater
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> CallbackContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> CommandHandler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Con ello, se puede instanciar el bot con el token obtenido y crear callbacks que permitan estar a la escucha de comandos de manera sencilla.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;token.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updater &lt;span style="color:#f92672">=&lt;/span> Updater(token&lt;span style="color:#f92672">=&lt;/span>token, use_context&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher &lt;span style="color:#f92672">=&lt;/span> updater&lt;span style="color:#f92672">.&lt;/span>dispatcher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logging&lt;span style="color:#f92672">.&lt;/span>basicConfig(format&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%(asctime)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(name)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(levelname)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(message)s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level&lt;span style="color:#f92672">=&lt;/span>logging&lt;span style="color:#f92672">.&lt;/span>INFO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>, start))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;bilatu&amp;#39;&lt;/span>, bilatu))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>, idealista))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>, fotocasa))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updater&lt;span style="color:#f92672">.&lt;/span>start_polling()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Esa funcion se ejecuta al arrancar el script. Cojo el token de un archivo separado y creo el bot. En el código se ve que se crean cuatro handlers. Esos son los comandos que después se pueden ejecutar con el bot. en este caso son &lt;code>/start&lt;/code>,&lt;code>/bilatu&lt;/code> (&amp;ldquo;buscar&amp;rdquo; en euskera),&lt;code>/idealista&lt;/code> ,&lt;code>/fotocasa&lt;/code>. Así se puede buscar en todos o solo en uno en específico. Las funciones llamadas con los callbacks son las siguientes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bilatu&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">idealista&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fotocasa&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scrap&lt;/span>(update: Update, context: CallbackContext, site):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_initial_message(context, update)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_price &lt;span style="color:#f92672">=&lt;/span> get_max_price(context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> site &lt;span style="color:#f92672">in&lt;/span> { &lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_idealista(max_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> site &lt;span style="color:#f92672">in&lt;/span> { &lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_fotocasa(max_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_results(flat_list, update, context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_final_message(context, update)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_initial_message&lt;/span>(context, update):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Emaidazu minutu bat!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_final_message&lt;/span>(context, update):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Hortxe dauzkazu!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Baásicamente se llaman a unas u otras funciones de scraping en función de el callback que se ejecuta. Los obtetos &lt;code>context&lt;/code> y &lt;code>update&lt;/code> permiten obtener la instancia del bot y toda la información relativa a los comandos que se han ejecutado (qué usuario los ha ejecutado, en que chat, grupo o canal, si ha pasado argumentos, etc.). Ahí también se puede ver los sencillo que es mandar un mensaje con un bot con la funcion &lt;code>bot.send_message()&lt;/code>.&lt;/p>
&lt;p>Lo interesante de esa parte es la función &lt;code>send_results()&lt;/code>, que coge lo generado por las funciones de scraping (la lista de pisos, cada uno con toda la información mencionada) y lo envía por Telegram.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_results&lt;/span>(flat_list: list, update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> flat &lt;span style="color:#f92672">in&lt;/span> flat_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_photo(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, caption&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>], photo&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Esto tambien bastante sencillo. Para enviar un mensaje basta con indicar el id del chat (que es algo que se recibe en los callbacks, apra saber desde donde se ha llamdo al comando) y lo que se quiera mandar. Antes se ha visto como se mandaba un mensaje con &lt;code>bot.send_message()&lt;/code>, pasando el chat y el texto. En este caso se envia la foto de cada piso con &lt;code>bot.send_photo()&lt;/code>, indicando en &lt;code>photo&lt;/code> la imagen recogida y en &lt;code>caption&lt;/code> el link.&lt;/p>
&lt;p>Con todo ello, es tan sencillo como lanzarlo y comenzar a buscar piso.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/telegram_bot.png" alt="Bot de Telegram" title="Bot de Telegram buscando piso">&lt;/p>
&lt;p>Tal y como queda me parece bastante elegante. Cogiendo el elemento entero como imagen se puede ver toda la información de un vistazo y poniendo el enlace se puede acceder al anuncio para obtener más información o directamente contactar con el anunciante. Otra opción podría haber sido coger el texto y haber creado una lista con los pisos y los enlaces, pero la primera forma me parece de las más elegantes y, sin duda, la más sencilla de todas.&lt;/p>
&lt;h2 id="parte-3-crear-un-canal-de-telegram-para-informar-de-los-pisos">Parte 3: crear un canal de Telegram para informar de los pisos&lt;/h2>
&lt;p>Sí, con esto no tengo suficiente. Escribir un comando al bot es demasiado trabajo. Por ello, a parte de tener el bot así, he añadido un metodo para que el bot, cada cierto tiempo, escriba en un canal las ofertas que hay. Esto es basicamente lo msimo que hace por ejemplo el &lt;a href="https://t.me/getmanfred">bot de Manfred&lt;/a> con las ofertas de trabajo, pero con mayor frecuencia. Además, me gusta como en ese bot no va dejando los mensajes de días anteriores, sino que solo está el último mensaje. Así evita que se llene el canal de mierda y deja que haya solo lo que tiene que haber. Por ello, yo lo he hecho igual.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">update_channel&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get channel and bot info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;token.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;channel_id.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> channel_id &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot &lt;span style="color:#f92672">=&lt;/span> telegram&lt;span style="color:#f92672">.&lt;/span>Bot(token&lt;span style="color:#f92672">=&lt;/span>token)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Remove previously sended messages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;sent_messages.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(int(line))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> stacked_messages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot&lt;span style="color:#f92672">.&lt;/span>delete_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, message_id&lt;span style="color:#f92672">=&lt;/span>stacked_messages&lt;span style="color:#f92672">.&lt;/span>pop())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Scrap all with the defaul top price&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_idealista(top_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_fotocasa(top_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Send the messages with the info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Saves the message_id of the messages to be able to delete them on the next one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Kaixo! Hamen dauzkazu oraintxe bertan dauden pisuak:&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> flat &lt;span style="color:#f92672">in&lt;/span> flat_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_photo(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, caption&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>], photo&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Hortxe dauzkazu!&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;sent_messages.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> message &lt;span style="color:#f92672">in&lt;/span> stacked_messages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(str(message) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Lo sé, esto no es lo más limpio que has visto en tu vida. Es basicamente más de lo mismo pero gestionando los mensajes que se han enviado. Cada mensaje enviado tiene un &lt;code>message_id&lt;/code>, que es lo que permite despues poder elimiarlos. Esta función basicamente elimina lo que se haya escrito antes en el canal, realiza el scraping, manda la información y guarda los &lt;code>message_id&lt;/code> para poder borrar los mensajes la próxima vez. Guarda esos id en un fichero para que, si peta el bot, no se pierdan y se puedan borrar al iniciarlo de nuevo, así no queda basura en el canal.&lt;/p>
&lt;p>En este caso, hace falta crear una instancia de &lt;code>Bot&lt;/code> ya que no se recibe de ningun lado. Ademas de esto, es necesario tener el id del chat o canal en el que se quiera escribir. Hay muchos bots que permiten sacar esos id.&lt;/p>
&lt;p>La idea tener el script en ejecucion 24/7 y con ello el bot siempre listo. Por un lado, con los handlers escuchando, lo que se hace con &lt;code>updater.start_polling()&lt;/code> visto antes. Por otro lado, hay que tener alguna manera para ejecutar la función &lt;code>update_channel()&lt;/code> cada cierto tiempo. Para ello se puede usar &lt;code>schedule&lt;/code>, una librería que permite programar tareas de manera sencilla. Para instalar, usar &lt;code>pip&lt;/code> y listo.&lt;/p>
&lt;p>Para usarla para ejecutar &lt;code>update_channel()&lt;/code> cada cierto tiempo, basta con añadir al final de la función &lt;code>init()&lt;/code> lo siguiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>hour&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(update_channel)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedule&lt;span style="color:#f92672">.&lt;/span>run_pending()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Como se ve, es muy sencillo de usar y el código se explica solo. No hay que asustarse por el &lt;code>while True&lt;/code>. El polling de los callbacks se ejecuta en otros hilos, por lo que esto no interfiere. Esto hace que se quede indefinidamente comprobando si tiene que lanzar alguna tarea.&lt;/p>
&lt;p>Con todo esto, ya solo queda dejarlo en algun lugar ejecutándose. Este tipo de cosas son perfectas para una Raspberry Pi o algo del estilo. También se puede meter en un VPS o en donde sea. Lo único que hay que tener en cuenta es que, o tenga pantalla, o se use alguna libreria como la mencionada para emularla. Además de que tiene que tener el navegador que se vaya a usar instalado.&lt;/p>
&lt;p>También se pueden añádir más sitios a los que hacer scraping, es facilmente escalable. En mi caso uso Idealista y Fotocasa, pero basta con añadir más funciones de scraping. Obviamente, cómo coger la informacion varía de sitio a sitio.&lt;/p>
&lt;h2 id="conclusiones">Conclusiones&lt;/h2>
&lt;p>Crear un bot de este tipo es una tarea sencilla, como se puede ver. Aquí la dificultad está en encontrar un piso decente que no cueste un ojo de la cara. Eso si que es difícil de verdad.&lt;/p>
&lt;p>Hacer un bot para obtener información actualizada de una puede ser muy util. Usar web scraping en vez de usar APIs tiene sus ventajas. Lo primero es que la mayoria de webs no tienen APIs, por lo que en esos caso no queda otra. En los casos en las que sí tienen, pueden estar limitadas. Lo bueno del web scraping es que te permite coger &lt;strong>lo que tú quieras y como tú quieras&lt;/strong>. Y que nadie os engañe; aqui, mientras no tires la web o extraigas datos de manera masiva, no hay delito.&lt;/p>
&lt;p>Espero haberme explicado bien y que si lees esto te pique la curiosidad para trastear con estos temas. Yo, por mi parte no voy a parar :)&lt;/p>
&lt;p>Por último, dejo aquí el &lt;a href="https://github.com/ander94lakx/pisu-bot">repo de GitHub&lt;/a> con el código completo. Como siempre, libre para que hagáis lo que queráis.&lt;/p>
&lt;p>Y recordad: &lt;em>&lt;strong>Scraping is not a crime!&lt;/strong>&lt;/em>&lt;/p></content></item><item><title>Pwnkit: Vulnerabilidad en Polkit (CVE-2021-4034) en 5 minutos</title><link>https://ander94lakx.github.io/blog/2022-01-29-polkit/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-01-29-polkit/</guid><description>Otro nuevo CVE de los que han dado que hablar. El CVE-2021-4034 salió a la luz hace unos días y se ha esparcido como la pólvora. No es que yo pueda aportar mucho más al tema del que no se haya dicho ya, pero si que puede estar bien hacer un repaso esquemático al CVE y a como explotarlo (que es trivial).
¿Qué es polkit? Polkit es una herramienta que permite controlar los privilegios en sistemas de tipo Unix.</description><content>&lt;p>Otro nuevo CVE de los que han dado que hablar. El &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4034">CVE-2021-4034&lt;/a> salió a la luz hace unos días y se ha esparcido como la pólvora. No es que yo pueda aportar mucho más al tema del que no se haya dicho ya, pero si que puede estar bien hacer un repaso esquemático al CVE y a como explotarlo (que es trivial).&lt;/p>
&lt;h2 id="qué-es-polkit">¿Qué es polkit?&lt;/h2>
&lt;p>&lt;a href="https://wiki.archlinux.org/title/Polkit">Polkit&lt;/a> es una herramienta que permite controlar los privilegios en sistemas de tipo Unix. Puede controlar la forma en la que los procesos sin privilegios se comunican con procesos con privilegios.&lt;/p>
&lt;p>Esto es util porque hay muchos casos en los que interesa que un proceso interactúe con procesos privilegiados unicamente para determinadas acciones, pero que no pueda hacer otras. En vez de usar algo como sudo (que sería como &amp;ldquo;abrir todas las puertas y a ver que pasa&amp;rdquo;), con Polkit se puede controlar en mayor detalle este tipo de operaciones.&lt;/p>
&lt;h2 id="cuál-es-la-vulnerabilidad">¿Cuál es la vulnerabilidad?&lt;/h2>
&lt;p>Polkit tiene una utilidad llamada &lt;a href="https://linux.die.net/man/1/pkexec">pkexec&lt;/a>. Esta utilidad permite ejecutar comandos como otro usuario o como root. Esta utilidad tiene una vulnerabilidad, ya que no parsea bien el número de parámetros que recibe y permite ejecutar variables de entorno como comandos (!).&lt;/p>
&lt;p>Entonces, según lo que se le pase como variables de entorno, se puede ejecutar código arbitrario. De ahí, se escala privilegios y se consigue permisos de admin, es decir, root.&lt;/p>
&lt;h2 id="cómo-se-puede-explotar-la-vulnerabilidad">¿Cómo se puede explotar la vulnerabilidad?&lt;/h2>
&lt;p>Obviamente, ya hay exploits para ello. Para ver lo fácil que es, se puede poner como ejemplo el exploit de &lt;a href="https://github.com/berdav/CVE-2021-4034">Davide Berardi&lt;/a>. Ponerlo a prueba es tan sencillo como clonar, compilar, ejecutar y win!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/berdav/CVE-2021-4034
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./cve-2021-4034
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Y &lt;em>voilà&lt;/em>! ahí tenéis la consola con root.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/polkit-exploit.png" alt="Polkit exploit" title="Polkit exploit">&lt;/p>
&lt;h2 id="qué-sistemas-son-vulnerables">¿Qué sistemas son vulnerables?&lt;/h2>
&lt;p>Pues diría que prácticamente todos. Aquí no se libra ni el apuntador. Se &lt;a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">ha logrado explotar&lt;/a> la vulnerabilidad en instalaciones por defecto de Ubuntu, Debian, Fedora, CentOS y muchas más distribuciones. Al fin y al cabo, teniendo en cuenta que es un componente que se encuentra en prácticamente todas las distribuciones Unix-like.&lt;/p>
&lt;p>Lo peor ya no es eso, sino que la vulnerabilidad lleva &lt;a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/c8c3d835d24fc4ce5a9c596c7d55d85a0311e8d1">más de 12 años&lt;/a> en el código (!). A mi, personalmente, esta es la parte que me asusta de este tipo de vulnerabilidades, las que llevan desde hace mucho pudiendo ser explotadas, por no poder saber hasta que punto se ha podido hacer uso de ella.&lt;/p>
&lt;h2 id="cómo-mitigar-la-vulnerabilidad">¿Cómo mitigar la vulnerabilidad?&lt;/h2>
&lt;p>Todo el mundo se ha puesto las pilas y han lanzado parches para ello, por lo que a estas alturas, con actualizar a través del gestor de paquetes debería ser suficiente para mitigarla.&lt;/p>
&lt;p>En el mismo repo del exploit que he mostrado hay una version simplemente para probar si se es vulnerable, que se puede probar de la siguiente manera:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make dry-run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dry-run/dry-run-cve-2021-4034
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Otra opción, en caso de que no se pudiera actualizar el sistema, por la razón que fuese (mala idea por cierto, hay que tener siempre actualizados los sistemas), puede ser desactivar el bit SUID de pkexec. Un &lt;code>chmod&lt;/code> para eliminar el bit para todos:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod ug-s /bin/pkexec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>De esta manera se impide que el exploit pueda escalar privilegios, aunque puede tener muchas consecuencias imprevistas (como en Half Life :)).&lt;/p>
&lt;h2 id="conlusiones">Conlusiones&lt;/h2>
&lt;p>A modo de resumen, os dejo unos puntos que me vienen a la cabeza tras ver una vulnerabilidad de este tipo:&lt;/p>
&lt;ul>
&lt;li>Cuidad vuestras entradas, sobre todo en lenguajes como C y al tratar con elementos a mas bajo nivel.&lt;/li>
&lt;li>Nunca se puede estar completamente seguro. Siempre hay vulnerabilidades que no conocemos pero que pueden ser descubiertas por otros.&lt;/li>
&lt;li>Cuanta más gente este del lado de los buenos, más vulnerabilidades de este tipo se podrán descubrir y con mayor rapidez.
&lt;ul>
&lt;li>Imaginaos las consecuencias de que esto caiga en malas manos (y no solo hablo de cibercriminales ;)).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Así que ya sabéis, a actualizar vuestros sistemas!&lt;/p>
&lt;p>Happy hacking!&lt;/p>
&lt;h2 id="exijo-más-detalles">¡Exijo más detalles!&lt;/h2>
&lt;p>Pues aquí los tienes:&lt;/p>
&lt;ul>
&lt;li>El &lt;a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">reporte original&lt;/a>.&lt;/li>
&lt;li>Artículo en &lt;a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">su blog&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>PD&lt;/em>: explicaría en detalle la vulnerabilidad, pero creo que ya esta muy bien explicada en cientos de artículos y videos, y no me voy a creer mejor que ellos. Mi objetivo aquí era simplemente hacer un breve resumen de una vulnerabilidad que me ha parecido interesante.&lt;/p></content></item><item><title>Análisis de malware (I) - Cómo empezar a analizar malware</title><link>https://ander94lakx.github.io/blog/2022-01-26-malware-analysis-1/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-01-26-malware-analysis-1/</guid><description>Estamos rodeados por malware. Todo el mundo ha tenido alguna vez un problema con algún tipo de virus o al menos conoce a alguien que lo haya tenido, al igual que conoce o trabaja en alguna empresa a la que le hayan atacado.
Personalmente, el malware me parece fascinante. Lo que me fascina es la eficacia que estos tienen. Son cuidadosamente diseñados para cumplir con su labor y hay ejemplos tan sofisticados que es alucinante ver cómo a alguien se le ha podido ocurrir programar algo de esa manera para explotar una vulnerabilidad o utilizar ciertos tipos de mecanismos de evasión.</description><content>&lt;p>Estamos rodeados por malware. Todo el mundo ha tenido alguna vez un problema con algún tipo de virus o al menos conoce a alguien que lo haya tenido, al igual que conoce o trabaja en alguna empresa a la que le hayan atacado.&lt;/p>
&lt;p>Personalmente, el malware me parece fascinante. Lo que me fascina es la eficacia que estos tienen. Son cuidadosamente diseñados para cumplir con su labor y hay ejemplos tan sofisticados que es alucinante ver cómo a alguien se le ha podido ocurrir programar algo de esa manera para explotar una vulnerabilidad o utilizar ciertos tipos de mecanismos de evasión.&lt;/p>
&lt;p>Cada vez que veo una noticia de un nuevo ransomware, troyano o malware de algún tipo, siento curiosidad por saber como funciona. Suelo ojear los informes técnicos que salen de los ataques más sonados en búsqueda de más información y me quedo alucinado por los informes de los analistas. En parte, por las características de los casos que analizan y las formas en las que funcionan los malware, pero, por otra parte, por como son capaces de obtener toda esa información.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/wannacry.png" alt="Wannacry" title="Wannacry en acción">&lt;/p>
&lt;p>Este tipo de informes son realizados por analistas de malware. A veces están dentro de los equipos de DFIR de una empresa, otras son organizaciones gubernamentales o militares y otras veces es un hacker cualquiera posteando en su blog sobre una muestra con la que está jugando. Lo que está claro es que cogen una muestra de un malware y la analizan. Es un campo fascinante que me llama mucho la atención porque mezcla disciplinas que me parecen muy interesantes. Mezcla informática forense con ingeniería inversa y conocimientos a bajo nivel de los sistemas. Es como el plato combinado perfecto.&lt;/p>
&lt;p>Últimamente he estado aprendiendo sobre esta area. Incluso hace no mucho realicé &lt;a href="https://github.com/ander94lakx/TFM_Doc">mi TFM&lt;/a> sobre ello. Para poder recolectar las cosas interesantes que he ido aprendiendo, he decidido escribir una serie de posts (y con ello retomar un poco este blog) sobre el proceso y algunas de las técnicas que se usan. Nno soy un experto en el tema, pero espero poder ayudar a quien lo lea y, por que no, a mi mismo al organizarme las ideas.&lt;/p>
&lt;h2 id="qué-es-el-análisis-de-malware">¿Qué es el análisis de malware?&lt;/h2>
&lt;p>El análisis de malware consiste en todas estas técnicas y procesos que permiten obtener información sobre cómo funciona un malware. El funcionamiento de cualquier programa, y por ello también el de un malware, depende de su código. Si se tuviera el código de un malware simplemente bastaría con examinarlo para conocer cómo funciona. En este caso no va a haber esa suerte. Lo mejor que podremos tener es algún tipo de código ofuscado o compilado, normalmente un binario.&lt;/p>
&lt;p>Hay muchos tipos de malware. Un malware puede ser ese pedacito de JavaScript que se te ha colado en esa web con el objetivo de minar crypto para alguien y, a cambio de ello, convertir tu ordenador en un radiador. Un malware también puede ser ese .exe que te han colado como activador para tu Office pirata. Según el tipo de malware, se analizará de una manera u otra.&lt;/p>
&lt;p>Yo en este caso me voy a centrar en malware para Windows y para arquitecturas x86 y x86_64. Si se piensa en ejemplos de malware, probablemente lo que más venga a la cabeza sean ejemplos para este tipo de sistemas y son los más comunes de encontrar.&lt;/p>
&lt;p>En esencia, analizar malware consiste en comprender el funcionamiento de un programa, pero sin tener acceso directamente al código fuente. Es como tener una caja negra e intentar entender como funciona: puedes abrirle las tripas para intentar sacar el código, puedes lanzarla y ver como interactúa dentro de un sistema o puedes coger y analizar la forma de la caja para obtener pistas sobre ella.&lt;/p>
&lt;h2 id="qué-se-hace-para-analizar-un-malware">¿Qué se hace para analizar un malware?&lt;/h2>
&lt;p>Hay diferentes procesos y técnicas para analizar malware. Hay incluso procesos y metodologías que se pueden seguir y que estandarizan la forma de hacerlo. Aun con ello, analizar malware consiste, en esencia, en sacar información sobre él: cómo funciona, qué mecanismos tiene para evadirse, cómo y con quién ese comunica, qué mecanismos usa para persistir o propagarse, etc.&lt;/p>
&lt;p>Las técnicas que se utilizan para sacar esa información son diversas, pero todas ellas se pueden dividir, a grandes rasgos, en las siguientes:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Análisis estático&lt;/strong>: consiste en analizar información sobre el malware sin analizar su código ni ejecutarlo: metadatos, firmas, formato y secciones del binario, etc.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/pe-bear.png" alt="PE-bear" title="Análisis estático con PE-bear">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Análisis dinámico&lt;/strong>: también llamado análisis de comportamiento, consiste en analizar la muestra mientras se ejecuta: ficheros con los que interactúa, llamadas al sistema, trafico de red, cambios en el registro, etc.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/wireshark.png" alt="Wireshark" title="Captura de tráfico de red con Wireshark">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Análisis de código&lt;/em>: como su nombre indica, consiste en observar el código y se distingue en dos tipos:&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ghidra.png" alt="Ghidra" title="Ghidra para análisis de código">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Análisis estático de código&lt;/strong>: analizar el código sin ejecutarlo.&lt;/li>
&lt;li>&lt;strong>Análisis dinámico de código&lt;/strong>: analizar el código mientras se ejecuta, es decir, depurarlo.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Como se puede ver, todo lo estático esta relacionado con analizar sin ejecutar, mientras que la parte dinámica tiene que tener el malware en ejecución. También se puede distinguir entre técnicas en función de si se analiza el código o no. Al analizar una muestra, lo normal es que se realicen algunos tipos de tareas antes que otras. Las técnicas de análisis estático suelen ser fáciles de realizar y suelen hacerse al principio. Por el contrario, analizar el código es una tarea tediosa y suele hacerse más adelante, Aunque todo ello depende del proceso y del analista.&lt;/p>
&lt;h2 id="como-empiezo-a-analizar-malware">¿Como empiezo a analizar malware?&lt;/h2>
&lt;p>Aquí no hay discusión, para analizar malware necesitas un entorno aislado. Coger malware y meterlo en tu ordenador para comenzar a trastear con él es mala idea. Si nadie quiere que se le cuele malware en su equipo sin querer, como para hacerlo a propósito.&lt;/p>
&lt;p>La mejor forma para tener un entorno aislado es hacer uso de una máquina virtual. Se puede usar lo que se quiera (VirtualBox, VMWare, &amp;hellip;). En mi caso soy más de usar VirtualBox, pero cualquiera es perfectamente válido. Una vez se tenga el software de virtualización, hace falta crear obtener una ISO con Windows, crear la maquina virtual, cargar la imagen en&amp;hellip; ¿O quizás no?.&lt;/p>
&lt;p>Es cierto que uno mismo puede buscar la ISO, crear la máquina e instalar Windows en ella, pero hay una forma más sencilla de obtener una VM con Windows, y es descargarla directamente de internet. La mejor opción son las VM que ofrece Microsoft para desarrolladores. Hay varias opciones. Se puede optar por una maquina que tiene un &lt;a href="https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/">entorno de desarrollo completo&lt;/a> (es más grande, pero si se quiere ademas usarla para desarrollar malware puede estar bien), o las máquinas virtuales que tienen &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">para testear aplicaciones&lt;/a> en Edge, más ligeras y, en mi opinión, la mejor opción. De estas últimas, ademas de Windows 10, también hay versiones para Windows 7 y Windows 8, que para malwares viejos puede ser interesante. Hay versiones para los software más famosos, como VirtualBox o VMWare, así que con seleccionar la version deseada, bajarse el archivo y cargarlo en el software de virtualización necesario es más que suficiente.&lt;/p>
&lt;h3 id="qué-herramientas-necesito-para-analizar-malware">¿Qué herramientas necesito para analizar malware?&lt;/h3>
&lt;p>Con una máquina virtual ya lista solo hace falta prepararla con las herramientas necesarias para analizar malware. Hay una gran cantidad de herramientas para analizar malware. Algunas como IDA o Ghidra sonarán a muchos. Al principio es normal no tener ni idea de cuales instalar. Lo mejor para estos casos es hacer uso de &lt;a href="https://github.com/mandiant/flare-vm">FLARE-VM&lt;/a>, una herramienta para instalar y mantener actualizados todo un conjunto de herramientas para analizar malware.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/flare-install.png" alt="Flare install" title="Proceso de instalación de FLARE-VM">&lt;/p>
&lt;p>Con usar esta herramienta sobre nuestra máquina y dejarle un rato para que instale todo, tendremos una maquina con todas las herramientas que se necesitan. Es la mejor opción, sobre todo, para probar todo tipo de herramientas y ya, en un futuro, poder crearte tu propio laboratorio solo con las herramientas que te gusten. La única desventaja que tiene usar algo como FLARE-VM es que nos va a engordar nuestra VM considerablemente (unos 60GB de VM ya te deja). A parte de eso, es tan sencillo como seguir los &lt;a href="https://github.com/mandiant/flare-vm#windows-10-installation">pasos de instalación&lt;/a> indicados en su repositorio.&lt;/p>
&lt;p>También existen otro tipo de herramientas o directamente distribuciones que vienen ya con todo listo para usar. Una de mis favoritas es &lt;a href="https://remnux.org/">Remnux&lt;/a>, una distribución linux que viene prácticamente con todo. Tiene herramientas hasta para analizar malware para Windows. El único problema que tiene para analizar malware para Windows es que no vamos a poder ejecutarlo sobre esa máquina. Aun asi, es muy recomendable también.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/remnux.png" alt="Remnux" title="Distribucion Remnux">&lt;/p>
&lt;p>Si, aun así quieres instalar las herramientas a mano, te dejo algunas de las herramientas que me gustan a mí. Hay muchas mas, y esto depende de gustos y necesidades, pero a mí, algunas de las que me gustan son:&lt;/p>
&lt;ul>
&lt;li>Para análisis estático:
&lt;ul>
&lt;li>&lt;a href="https://www.winitor.com/">PEstudio&lt;/a> y &lt;a href="https://github.com/horsicq/Detect-It-Easy">DIE&lt;/a> para analizar binarios.&lt;/li>
&lt;li>&lt;a href="https://ssdeep-project.github.io/ssdeep/index.html">ssdeep&lt;/a> y &lt;a href="https://virustotal.github.io/yara/">YARA&lt;/a> (y las &lt;a href="https://github.com/Yara-Rules/rules">Yara-Rules&lt;/a>) para clasificar y buscar malware similar.&lt;/li>
&lt;li>&lt;a href="https://github.com/mandiant/capa">capa&lt;/a> para obtener de un vistazo pistas sobre las capacidades de una muestra.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Para análisis de código:
&lt;ul>
&lt;li>&lt;a href="https://hex-rays.com/ida-free/">IDA&lt;/a> para reversing y analizar código.&lt;/li>
&lt;li>&lt;a href="https://ghidra-sre.org/">Ghidra&lt;/a> para cuando no puedas decompilar las muestras en IDA porque no te sobran miles de euros.&lt;/li>
&lt;li>&lt;a href="https://x64dbg.com/">x64dbg&lt;/a> para &lt;del>crackear videojuegos&lt;/del> depurar muestras.
&lt;ul>
&lt;li>Mejora mucho con &lt;a href="https://github.com/x64dbg/ScyllaHide">ScyllaHide&lt;/a> y &lt;a href="https://github.com/ThunderCls/xAnalyzer">xAnalizer&lt;/a>, dos plugins indispensables.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Para análisis de comportamiento:
&lt;ul>
&lt;li>&lt;a href="https://processhacker.sourceforge.io/">Process Hacker&lt;/a> y las &lt;a href="https://docs.microsoft.com/en-us/sysinternals/">SysInternals&lt;/a> de Windows, en especial &lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon">Process Monitor&lt;/a> para poder monitorizar y analizar procesos y eventos del sistema.
&lt;ul>
&lt;li>Los PML de Process Monitor son tu mayor aliado.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://sourceforge.net/projects/regshot/">Regshot&lt;/a> para capturar y comparar cambios en el registro.&lt;/li>
&lt;li>&lt;a href="https://www.wireshark.org/">Wireshark&lt;/a> para capturar y analizar tráfico de red.&lt;/li>
&lt;li>&lt;a href="https://belkasoft.com/es/bat">Belkasoft Acquisition Tool&lt;/a> para volcados de memoria&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Otros:
&lt;ul>
&lt;li>&lt;a href="https://mh-nexus.de/en/hxd/">HxD&lt;/a> como editor hexadecimal.&lt;/li>
&lt;li>Una taza con café al lado.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="y-ahora-qué">¿Y ahora qué?&lt;/h2>
&lt;p>Con todo listo y preparado, solo queda buscar una muestra para empezar a jugar. Para no abrumarse demasiado, lo mejor es optar por muestras de malware que ya hayan sido analizadas y no sean demasiado complejas. En repositorios como &lt;a href="https://github.com/ytisf/theZoo">TheZoo&lt;/a> hay muestras de malwares famosos. También se puede buscar alguno concreto en plataformas como &lt;a href="https://bazaar.abuse.ch/">MalwareBazaar&lt;/a>.&lt;/p>
&lt;p>Otra opción consiste en probar este tipo de herramientas y técnicas con crackmes. Un crackme es el equivalente a una máquina de Hack The Box o TryHackMe pero para reversing. No son específicos para analizar malware, pero las técnicas que se usan con, en esencia, las mismas. Webs como &lt;a href="https://crackmes.one/">crackmes.one&lt;/a> tienen muchos crackmes de diferentes dificultades con los que practicar.&lt;/p>
&lt;p>En los próximos posts explicare algunas de estas técnicas sobre una muestra de malware real para poder ver como se aplican las diferentes técnicas y como se usan las herramientas.&lt;/p>
&lt;p>Happy hacking!&lt;/p></content></item><item><title>Cómo descargarse las imágenes de un perfil de Instagram con Python y web scrapping</title><link>https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/</guid><description>Instagram es la red del postureo. Es probablemente la red social que más uso. Soy demasiado joven como para usar Facebook activamente y demasiado viejo siquiera para plantearme crearme TikTok (si veis que ocurre, os doy permiso para acabar con mi existencia). También uso twitter, pero más como proveedor de &amp;ldquo;noticias&amp;rdquo;, pero no publico nada en esa red social.
Por lo tanto, todas mis publicaciones suelen ir a Instagram. A lo largo de los años me he dado cuenta de que se ha convertido en una especie de diario de hitos personales.</description><content>&lt;p>Instagram es la red del postureo. Es probablemente la red social que más uso. Soy demasiado joven como para usar Facebook activamente y demasiado viejo siquiera para plantearme crearme TikTok (si veis que ocurre, os doy permiso para acabar con mi existencia). También uso twitter, pero más como proveedor de &amp;ldquo;noticias&amp;rdquo;, pero no publico nada en esa red social.&lt;/p>
&lt;p>Por lo tanto, todas mis publicaciones suelen ir a Instagram. A lo largo de los años me he dado cuenta de que se ha convertido en una especie de diario de hitos personales. Por encima de las fotos de mis viajes se pueden ver y observar fotos de cuando me saqué la carrera, de cuando vivía en Madrid y estaba en un estudio programando un videojuego o de buenos momentos con amigos. Aunque la calidad de las imágenes puede no ser la mejor, me gusta meterme de vez en cuando ahí y ver todos esos viajes y momentos.&lt;/p>
&lt;p>Aun así, soy informático y se que la única manera de que tu información pueda estar segura es tener tú mismo una copia. Por ello llevaba tiempo planteándome realizar algún script que me permitiera bajarme todas las fotos de mi perfil. También podia usar esto para refrescar un poco Python y practicar algo de Web Scrapping.&lt;/p>
&lt;h1 id="web-scrapping-con-selenium">Web Scrapping con Selenium&lt;/h1>
&lt;p>Hace tiempo hubo un intento fallido por mi parte, principalmente porque intente descargar, &lt;em>parsear&lt;/em> y buscar las páginas a mano. El problema es que una página no consiste únicamente en un HTML, y hacerlo a mano implica ir &amp;ldquo;tirando del hilo&amp;rdquo; hasta obtener todos los recursos que componen una página. Por lo tanto lo deje aparcado. Eso hasta el otro día, en el que de pura casualidad encontré un &lt;a href="https://www.youtube.com/watch?v=d2GBO_QjRlo">video&lt;/a> en el que alguien programaba un bot para Instagram para ver la gente que le había dado unfollow. El objetivo que tenía me daba igual, pero quería ver como lo hacía.&lt;/p>
&lt;p>Al ver como lo hacia vi que utilizaba una librería llamada &lt;a href="https://www.selenium.dev/">Selenium&lt;/a>, que es una herramienta que permite automatizar un navegador. Es básicamente el santo grial del Web Scrapping, permite ahorrarte todo el engorro de realizar las peticiones, filtrar las páginas, buscar etiquetas, etc. Así que me baje el WebDriver para Firefox (es el puente que une la librería con el navegador), instalé la librería para Python y basándome en el video comencé a programar.&lt;/p>
&lt;h1 id="loguearse-en-instagram">Loguearse en Instagram&lt;/h1>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ig-login.png" alt="Web de login de instagram">&lt;/p>
&lt;p>Lo primero que hay que hacer es hacer &lt;em>log in&lt;/em> en la página. Para ello, lo que hay que hacer es lo siguiente&lt;/p>
&lt;ol>
&lt;li>Obtener la web. Al no habernos logueado, la web que aparecerá será la de login&lt;/li>
&lt;li>Obtener los campos de usuario y contraseña y llenarlos&lt;/li>
&lt;li>Pulsar el botón de &lt;em>Log in&lt;/em>&lt;/li>
&lt;/ol>
&lt;p>Todo ello se hace en Python de la siguiente manera:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">InstaBot&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, username, pw):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver &lt;span style="color:#f92672">=&lt;/span> webdriver&lt;span style="color:#f92672">.&lt;/span>Firefox(executable_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;./geckodriver.exe&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>username &lt;span style="color:#f92672">=&lt;/span> username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://instagram.com&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//input[@name=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">username&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>send_keys(username)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//input[@name=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">password&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>send_keys(pw)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//button[@type=&amp;#34;submit&amp;#34;]&amp;#39;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//button[contains(text(), &amp;#39;Ahora no&amp;#39;)]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Como se puede ver, he metido el código en el constructor de una clase, que es la clase donde voy a implementar todo. Está en el constructor porque, independientemente de lo que se quiera hacer, es necesario realizar ese login. Los &lt;code>sleep()&lt;/code> son necesarios ya que hay que dejar tiempo para que cargue la página.&lt;/p>
&lt;p>Si se ejecuta eso, se ve que en realidad es el mismo proceso que realizaría cualquiera para meterse en Instagram, solo que automatizado. Incluso se puede ver en directo en el navegador aislado que abre el WebDriver. No voy a indagar en cada función, ya que creo que los nombres son muy explicativos y es fácil comprender que esta haciendo cada una.&lt;/p>
&lt;h1 id="obtener-todos-los-posts">Obtener todos los posts&lt;/h1>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ig-posts.png" alt="Posts de Instagram">&lt;/p>
&lt;p>Una vez hecho eso, mi idea era ir a la página del perfil, coger cada enlace a cada post y de cada uno coger la URL donde se encuentra la imagen. Este es un proceso que ya he hecho a mano, por lo tanto se que las imágenes de Instagram se pueden coger si vas inspeccionando el HTML en búsqueda de la URL de la imagen, la URL de un post suele ser algo así, que esta en la etiqueta &lt;code>&amp;lt;img&amp;gt;&lt;/code> anidada por varios &lt;code>&amp;lt;div&amp;gt;&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/g-image-post-url.png" alt="URL de la imagen de un post de Instagram">&lt;/p>
&lt;p>Pero antes de llegar a eso, es necesario coger los enlaces a todos los post, para poder buscar el enlace de la imagen para cada uno de ellos. Los enlaces de un post de Instagram tienen el formato &lt;code>https://www.instagram.com/p/B--N-oBKdPL/&lt;/code>. Para cogerlos, una vez llegados la página del perfil, hay que ir bajando abajo e ir buscando estos enlaces.&lt;/p>
&lt;p>Mi idea inicial era hacer scroll hasta abajo del todo y después buscar todos los enlaces. El problema es que la página de perfil solo mantiene un número de post cargados en el grid y, a medida que se va bajando y se va cargando nuevos, los anteriores desaparecen. En mi experiencia suele mantener cargados en torno a 30. Por lo tanto, lo que habría que hacer es hacer scroll e ir cogiendo los enlaces. Para ello he creado la función &lt;code>get_pictures_links()&lt;/code>, que contiene lo siguiente:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_pictures_links&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//a[contains(@href,&amp;#39;/&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;)]&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(self&lt;span style="color:#f92672">.&lt;/span>username))\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_height &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;return document.body.scrollHeight&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;window.scrollTo(0, document.body.scrollHeight);&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links_elements &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_elements_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//a[contains(@href,&amp;#34;p/&amp;#34;)]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> elem &lt;span style="color:#f92672">in&lt;/span> links_elements:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links&lt;span style="color:#f92672">.&lt;/span>append(elem&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_height &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;return document.body.scrollHeight&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> new_height &lt;span style="color:#f92672">==&lt;/span> last_height:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_height &lt;span style="color:#f92672">=&lt;/span> new_height
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links &lt;span style="color:#f92672">=&lt;/span> list(set(links))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> links
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Hay varias cosas a resaltar en el fragmento anterior:&lt;/p>
&lt;ul>
&lt;li>El scroll se hace mediante JavaScript. Para ejecutar código JavaScript en la web se usa la función &lt;code>execute_script()&lt;/code>&lt;/li>
&lt;li>El contador de altura sirve para saber cuando hay que parar de bajar. Si al bajar sigue en la misma altura del final se para&lt;/li>
&lt;li>Para buscar los enlaces a los post hay que buscar las etiquetas &lt;code>&amp;lt;a&amp;gt;&lt;/code> correspondientes. En este caso se busca una etiqueta de enlace que contenga &lt;code>/p&lt;/code> en el atributo &lt;code>href&lt;/code>.
&lt;ul>
&lt;li>Una vez obtenida la etiqueta o, como en este caso, la lista de etiquetas que cumplen ese criterio, se obtienen los atributos en sí, que son las URL que queremos. Estas se guardan en la lista.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Por como funciona el grid, lo normal es acabar cogiendo valores repetidos, ya que las etiquetas se van descargando al cabo del tiempo, pero se mantienen durante varios scrolls. Por lo tanto, al final del todo, se hace el &lt;code>list(set(links))&lt;/code> para eliminar duplicados (se pasa a un set, que no puede contener repetidos, y después a una lista para dejarlo como antes). Hacer eso deja los elementos desordenados, pero en este caso no importa. De las soluciones que he encontrado en &lt;a href="https://stackoverflow.com/a/7961393">StackOverflow&lt;/a>, esa me parecía la más limpia y apta para este caso.&lt;/li>
&lt;/ul>
&lt;h1 id="obtener-los-_permalinks_-a-las-imágenes">Obtener los &lt;em>permalinks&lt;/em> a las imágenes&lt;/h1>
&lt;p>Con todos los posts, no queda más que ir uno a uno, para abrirlos y buscar las imágenes que contienen. Para ello, he creado la función &lt;code>get_picture()&lt;/code>, a la que le voy pasando cada uno de los links que previamente he obtenido y busco la imagen para descargarla.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_picture&lt;/span>(self, link):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>get(link)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> img_element &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//img[contains(@class,&amp;#34;FFVAD&amp;#34;)]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">=&lt;/span> img_element&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;src&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_element &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_elements_by_tag_name(&lt;span style="color:#e6db74">&amp;#39;time&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> time_element[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;datetime&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> url &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">and&lt;/span> timestamp &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> timestamp&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> timestamp&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urllib&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>urlretrieve(url, timestamp &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.jpg&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Obviando que no trato la excepción (y debería), aquí es donde realmente ocurre la magia y donde hay más problemas. De momento la forma más sencilla que he encontrado para obtener la etiqueta que contiene la imagen real, es buscarla mediante su clase. Los nombres de todas las clases que se usan en el HTML de la web de Instagram están ofuscados. Pero, basándome en las pruebas que he estado realizando, estos no cambian en el tiempo, por lo tanto usando ese nombre de clase. Una vez sabiendo cómo hacerlo, es muy fácil encontrar con Seleniun la etiqueta y obtener la URL.&lt;/p>
&lt;p>Además, para poder guardar las imágenes también obtengo el timestamp de cuando se publicó el post. A partir de ahi, no hace falta mas que descargar la imagen con &lt;code>urllib&lt;/code>.&lt;/p>
&lt;h1 id="conclusión">Conclusión&lt;/h1>
&lt;p>El bot tiene muchas partes con margen de mejora. Hasta ahora no he hablado de los post que contienen un video ni de los post que contienen varias imágenes. Iré mejorándolo con el tiempo, pero creo que tal y como esta es una buena herramienta para entender como hacer Web Scrapping a nivel básico. Voy a dejar el código en un &lt;a href="https://github.com/ander94lakx/InstaBot">repositorio de GitHub&lt;/a>, donde se irán pudiendo ver dichas mejoras.&lt;/p>
&lt;h1 id="y-la-api-de-instagram">¿Y la API de Instagram?&lt;/h1>
&lt;p>En este punto quizás alguien se plantee por que hacer todo esto y no usar directamente la API de Instagram. Por un lado, se que hay una nueva API, pero no la conozco. Mi objetivo es intentar hacer lo mismo que hace esta herramienta pero con dicha API. La que conozco es API anterior, la cual me parece limitada y pronto quedará en desuso.&lt;/p>
&lt;p>Aun así, el objetivo de este bot es no depender de si Instagram te va a permitir obtener dichas imágenes o no. Al fin y al cabo, una vez habiéndote logueado en la aplicación, técnicamente se pueden coger todas las imágenes que quieras, por lo que deberías ser capaz de hacerlo también de manera programática.&lt;/p>
&lt;p>Al final, no consiste en si Instagram te va a dejar o no, sino en: ¿si puedes, por qué no hacerlo?&lt;/p></content></item><item><title>No tenemos ni idea de cómo hacer teletrabajo y cómo podemos solucionarlo</title><link>https://ander94lakx.github.io/blog/2020-04-11-covid-remote-work/</link><pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2020-04-11-covid-remote-work/</guid><description>Últimamente he estado leyendo varios artículos con respecto al teletrabajo. Parece que, ahora que la situación lo demanda, el teletrabajo es una forma de trabajo fundamental y necesaria.
Algunos titulares claman que la situación actual ha hecho surgir el mayor experimento de teletrabajo de la historia y razón no les falta. Aun así, no paro de ver que la mayoría de artículos que tratan el tema no son más que una suma de recomendaciones de aplicaciones para realizar tareas de manera remota o colaborativa online.</description><content>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/laptop-beer2.jpg" alt="Trabajar desde casa">&lt;/p>
&lt;p>Últimamente he estado leyendo varios artículos con respecto al teletrabajo. Parece que, ahora que la situación lo demanda, el teletrabajo es una forma de trabajo fundamental y necesaria.&lt;/p>
&lt;p>Algunos titulares claman que la situación actual ha hecho surgir &lt;a href="https://www.xataka.com/empresas-y-economia/coronavirus-ha-activado-mayor-experimento-teletrabajo-historia">el mayor experimento de teletrabajo de la historia&lt;/a> y razón no les falta. Aun así, no paro de ver que la mayoría de artículos que tratan el tema no son más que una suma de recomendaciones de aplicaciones para realizar tareas de manera remota o colaborativa online. Principalmente son listados de sugerencias sobre qué aplicación es mejor para realizar videoconferencias, las mejores aplicaciones de mensajería, de gestión de tareas, etcétera. Si se quiere tratar un tema como el teletrabajo con un mínimo de rigor se queda bastante corto.&lt;/p>
&lt;p>No soy la persona con más experiencia teletrabajando, ni mucho menos. Si ahora mismo realizo teletrabajo es más impuesto por la situación que porque las formas de trabajar de mi equipo o departamento estén adaptadas a ello. Precisamente por eso me gustaría matizar que el teletrabajo no consiste simplemente en el uso de una serie de herramientas, sino de una mentalidad y unas formas de trabajo determinadas que, en ciertos aspectos, difieren del trabajo en la oficina. Las herramientas lo permiten, claro que sí, pero de la misma manera que el comprarte una caja de herramientas no va a hacer que sepas montar un mueble, bajarte Slack y Zoom no va a hacer que puedas teletrabajar y ser igual de productivo. El teletrabajo requiere una &amp;ldquo;cultura&amp;rdquo; en tu equipo que no se puede implementar de la noche a la mañana, requiere de un cierto periodo de adaptación.&lt;/p>
&lt;p>Con esto no estoy diciendo que no se pueda teletrabajar y ser productivo si no se han implementado medidas de teletrabajo previamente. La situación nos ha obligado a adaptarnos y toca, queramos o no, experimentar con el teletrabajo. Con un experimento se pueden sacar muchísimas lecciones, tanto de los aciertos como de los fallos. El método científico da prácticamente el mismo valor a los fallos que a los aciertos, porque los fallos pueden aportar mucha información interesante.&lt;/p>
&lt;p>En mi opinion, y hablo con respecto a mi area de trabajo y mi entorno laboral, la cultura del teletrabajo es algo que está muy verde actualmente. No solo porque muchas empresas den opciones muy limitadas con respecto a la flexibilidad de horarios, ubicación del trabajador, etc. sino principalmente porque se sigue estando anclado a la forma de trabajar de la oficina, la de toda la vida.&lt;/p>
&lt;p>Debido a ello creo que este gran experimento que ha arrancado a marchas forzadas va a dejar muchos tropiezos. Y eso es bueno. Por ello, basándome en la experiencia personal y como veo la situación, mas que dar recomendaciones entre si usar Skype o Zoom y Trello o Jira, creo que tiene mayor importancia analizar los fallos que estamos cometiendo (por supuesto, soy el primero en incluirme) a la hora de trabajar. Por ello voy a enumerar algunos de esos fallos.&lt;/p>
&lt;h1 id="no-tener-horario">No tener horario&lt;/h1>
&lt;p>La flexibilidad laboral asociada al teletrabajo está muy bien, permite conciliar la vida profesional con la personal, algo que debería ser básico. Pero tener flexibilidad laboral no significa no tener horario. Ya seas de los de &lt;em>9 to 5&lt;/em> o de los que se personaliza más los horarios, es importante marcar en que horas se va a estar trabajando y en cuales no. Si no se marcan, se puede caer en la trampa de estar siempre &amp;ldquo;disponible&amp;rdquo;. Entonces es cuando los beneficios de la flexibilidad laboral se convierten en su contrario.&lt;/p>
&lt;h1 id="coger-siempre-el-teléfono">Coger siempre el teléfono&lt;/h1>
&lt;p>Estoy de acuerdo en que hay llamadas que hay que coger sí o sí, pero hay que poner límites. Ahora mismo, cuando ya no hay excusa para no coger el teléfono porque &amp;ldquo;no puedes ir a ninguna parte&amp;rdquo; es más importante que nunca dejarlo claro. En mi caso no me afecta tanto, pero si eres de los que recibe muchas llamadas por teléfono no me lo quiero imaginar. Básicamente no te permitiría mantener un mínimo de tiempo la concentración. De la misma manera que si estas muy ocupado en la oficina y alguien te va a preguntar algo, le dices de manera educada que &amp;ldquo;ahora no, que lo miras un poco más tarde&amp;rdquo;, se puede hacer algo similar ignorando temporalmente el teléfono.&lt;/p>
&lt;h1 id="no-dejar-las-cosas-por-escrito">No dejar las cosas por escrito&lt;/h1>
&lt;p>Esta es un clásico y ha sido un problema desde siempre, pero el problema se hace más visible en la situación actual. Resulta muy fácil recurrir a acercarte a un compañero y comentar algo con él sobre una tarea, tomar una decisión y no dejar eso por escrito. Otro de los errores comunes es el organizar algunos aspectos hablando con un compañero, y comunicárselo a otros en el mismo momento. A lo que quiero llegar es a que en la oficina todo el mundo se entera. Pero si cada uno esta en su casa trabajando no. En mi casa no escucho a ninguno de mis compañeros, por lo que de la conversación entre dos compañeros (que obviamente mantendrán por teléfono, Skype, etc.) no me voy a enterar.&lt;/p>
&lt;p>Esto puede hacer que, al final, para tener a todo el equipo conectado sea necesario un sinfín de llamadas o reuniones excesivamente largas. No se puede estar siempre al teléfono, pero hay que estar siempre informado. Para ello hay herramientas, como el mail o aplicaciones como Slack, para dejar las cosas por escrito. Cada sistema responde a una necesidad, y no es lo mismo Slack que el mail. Slack es muy buena herramienta para conversar y dejar conversaciones interesantes por escrito o pasar enlaces y recursos interesantes, entre otros. Así se evita la saturación del mail, el cual debería quedar relegado para asuntos más centrales, como comunicación con clientes o informes más densos, entre otros.&lt;/p>
&lt;h1 id="las-reuniones">Las reuniones&lt;/h1>
&lt;p>Hay dos tipos de reuniones: las reuniones en las que realmente estás trabajando y las que no te apetece tener pero son necesarias para discutir aspectos que necesitas definir o aclarar para ponerte a trabajar. Las del primer tipo se llaman &lt;em>workshops&lt;/em>. Las del segundo tipo son las que pueden llegar a ser más tediosas. Hay que aclarar que este tipo de reuniones telemáticas no son algo nuevo y se dan con cierta frecuencia aun teniendo un trabajo presencial, pero precisamente por eso es necesario hablar de ellas. Cuando todas las reuniones tienen este formato entonces hay un problema.&lt;/p>
&lt;p>Sin entrar muy de lleno y por dar unas pinceladas, yo diría que las reuniones de ese último tipo deben ser claras, concisas, tener previamente definidos unos puntos a tratar y ser lo mas breves posibles. Esto, por supuesto, también se aplica a las reuniones presenciales. El problema reside en que, si no se tiene en cuenta ahora para las reuniones telemáticas, estas pueden llegar a ser mucho peores que las reuniones presenciales&lt;/p>
&lt;h1 id="control-de-versiones">Control de versiones&lt;/h1>
&lt;p>Esta es algo más concreta y solamente es aplicable a un tipo de teletrabajo específico, el desarrollo de software. El control de versiones ya se usa de por sí en prácticamente cualquier trabajo que involucre el desarrollo de software. Ahora bien, una cosa es usarlo y otra cosa es usarlo bien. En estos tiempos es donde se va a poner de manifiesto si se esta haciendo buen uso.&lt;/p>
&lt;p>Es muy sencillo cometer una serie de malas prácticas cuando estas con los compañeros en la oficina. Es muy sencillo coordinarte para ver si puedes subir unos cambios o no, o esperar a algún &lt;em>commit&lt;/em> de un compañero para subir tus cambios. También es más rápido pedirle a un compañero que haga un &lt;em>hotfix&lt;/em> sencillo ya que, si el esta tocando ese código, tú te evitas cualquier conflicto que se pueda dar en caso de subirlo tú mismo. Algunas de estas malas prácticas ya no se pueden realizar, por lo que para que no se forme el caos en el repositorio, tener una buena metodología de trabajo con respecto al control de versiones resulta esencial.&lt;/p>
&lt;h1 id="conclusión">Conclusión&lt;/h1>
&lt;p>No soy un guru del teletrabajo, ni mucho menos. Aun así, basándome en mi experiencia con el trabajo en remoto y el presencial, lo mas importante que tenemos que aprender de esta situación, en la que el teletrabajo se vuelve una necesidad, es que es necesario mejorar muchos aspecto a la hora de trabajar en nuestro equipo de trabajo y con nuestros compañeros. Obviamente todas las herramientas posibles ayudan, pero lo esencial si queremos que el teletrabajo sea una herramienta para compatibilizar la vida profesional con la personal (y no solo un parche a corto plazo) es que debemos cambiar de raíz muchos aspectos de la forma de trabajar que se tienen actualmente en muchas oficinas y empresas.&lt;/p></content></item><item><title>Initial commit</title><link>https://ander94lakx.github.io/blog/2020-04-04-presentation/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2020-04-04-presentation/</guid><description>Llevo años planteándome crear un blog. No se si es porque llevo 3 semanas encerrado en mi casa (y las que me quedan) debido a la cuarentena y me aburro bastante o si es que ahora estoy realmente dispuesto a ponerme con ello, pero aun así me he lanzado a la aventura.
Para quien no me conozca, me llamo Ander Granado. Soy un chaval de Vitoria-Gasteiz de 25 años que estudió Ingeniería Informática y se dedica a programar software.</description><content>&lt;p>Llevo años planteándome crear un blog. No se si es porque llevo 3 semanas encerrado en mi casa (y las que me quedan) debido a la cuarentena y me aburro bastante o si es que ahora estoy realmente dispuesto a ponerme con ello, pero aun así me he lanzado a la aventura.&lt;/p>
&lt;p>Para quien no me conozca, me llamo Ander Granado. Soy un chaval de Vitoria-Gasteiz de 25 años que estudió Ingeniería Informática y se dedica a programar software.&lt;/p>
&lt;p>Como he dicho, soy Ingeniero Informático e, incluso desde antes de empezar a estudiar, me gusta trastear con diferentes áreas dentro de este campo. Desde la programación, ya sea web, desktop, móvil, videojuegos, scripts o herramientas de cualquier tipo hasta cualquier otro campo como la ciberseguridad, el hacking, el mundo de Linux y cualquier cosa relacionada con la ciencia y la tecnología en general. No solo soy un programador informático, también me gustan otra serie de cosas como los jugar a videojuegos, vivir enganchado a Spotify, viajar, beber cerveza o algunos asuntos sociales o políticos, entre otros.&lt;/p>
&lt;p>Hay muchísimos temas que me gustan y de los que creo que puede ser interesante hablar, no porque crea que mis palabras u opiniones sean dignas de ser escuchadas, sino porque creo que es una forma interesante de generar una especie de &amp;ldquo;diario&amp;rdquo; personal. También puede servirme para practicar mi escritura y probar a escribir en otros idiomas, como inglés o euskera, por lo que no os asustéis si veis algo pobremente escrito en alguno de esos idiomas. Tambien quiero recalcar lo de &amp;ldquo;personal&amp;rdquo;. Esto es algo completamente personal, por lo que todo lo que ponga por aquí no representa más que mi punto de vista.&lt;/p>
&lt;p>Si te interesa en este blog puedes llegar a encontrar una de las siguientes tres cosas:&lt;/p>
&lt;ul>
&lt;li>Un proyecto abandonado nada más empezar por alguien que es demasiado vago como para escribir cuatro putas líneas con cierta regularidad&lt;/li>
&lt;li>Una serie de divagaciones desordenadas de un Ingeniero Informático trastornado&lt;/li>
&lt;li>Algunas opiniones interesantes y artículos sobre programación, hacking, sistemas, ciencia, tecnología, música o política&lt;/li>
&lt;/ul>
&lt;p>Todo dependerá de lo vago que sea durante los próximos meses.&lt;/p>
&lt;p>Por lo que a mi respecta, muchas gracias por leerme y si te interesa, tengo una serie de redes sociales donde puedes seguirme. Tengo &lt;a href="https://www.instagram.com/andergranado/">Instagram&lt;/a>, donde subo principalmente fotos de mis viajes y de lo que leo (muy hipster, lo sé). También tengo &lt;a href="https://twitter.com/AnderGrM">Twitter&lt;/a>, que si no lo tengo abandonado, es lo que uso para enterarme de cosas nuevas del mundo del desarrollo, seguir a artistas, etcétera. Por último, aunque no es una red social, tengo &lt;a href="https://github.com/ander94lakx">GitHub&lt;/a>, donde tengo subidos algunos proyectos, desde cosas antiguas de la uni hasta alguna cosilla que estoy haciendo (como, por ejemplo, este mismo blog).&lt;/p>
&lt;p>Ondo ibili!&lt;/p>
&lt;p>P.D.: El blog esta hecho con &lt;del>Jekyll&lt;/del> Gatsby, que me parece una herramienta cojonuda para hacer un blog como este y poder hostearlo con GitHub Pages.&lt;/p>
&lt;p>P.D.2: El nombre del blog es simplemente una fusión bastante cutre del nombre de una canción de Lou Reed con la palabra byte.&lt;/p></content></item><item><title>Sobre mí</title><link>https://ander94lakx.github.io/about/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/about/</guid><description>Como habrás podido comprobar, me llamo Ander Granado. Soy ingeniero informático, desarrollador de software y hacker.
Este es mi blog, en el que puedes encontrar artículos sobre las cosas con las que voy trasteando, ya sea de programación, sobre hacking o sobre cualquier cosa que se me pueda pasar por la cabeza. Además de ello, podrás encontrar muy poca consistencia a la hora de realizar entradas y un lenguaje relativamente caótico y ácido.</description><content>&lt;p>Como habrás podido comprobar, me llamo Ander Granado. Soy ingeniero informático, desarrollador de software y hacker.&lt;/p>
&lt;p>Este es mi blog, en el que puedes encontrar artículos sobre las cosas con las que voy trasteando, ya sea de programación, sobre hacking o sobre cualquier cosa que se me pueda pasar por la cabeza. Además de ello, podrás encontrar muy poca consistencia a la hora de realizar entradas y un lenguaje relativamente caótico y ácido.&lt;/p>
&lt;p>También tengo una serie de redes sociales donde puedes seguirme. Tengo &lt;a href="https://www.instagram.com/andergrma/">Instagram&lt;/a>, donde subo principalmente fotos de mis viajes y de lo que leo (muy hipster, lo sé). También tengo &lt;a href="https://twitter.com/andergrma">Twitter&lt;/a> y &lt;a href="https://mastodon.social/@andergrma">Mastodon&lt;/a>, que si no los tengo abandonados, es lo que uso para enterarme de cosas nuevas del mundo del desarrollo, seguir a artistas, etcétera. Por último, aunque no es una red social, tengo &lt;a href="https://github.com/ander94lakx">GitHub&lt;/a>, donde tengo subidos algunos proyectos, desde proyectos antiguos de la uni hasta algunas cosilla que estoy haciendo (como, por ejemplo, este mismo blog).&lt;/p></content></item><item><title>PGP</title><link>https://ander94lakx.github.io/pgp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>ander@protonmail.com (Ander Granado)</author><guid>https://ander94lakx.github.io/pgp/</guid><description>-----BEGIN PGP PUBLIC KEY BLOCK----- Version: OpenPGP.js v4.10.10 Comment: https://openpgpjs.org xsFNBGBqI2wBEADdCsYZyfj3wgUnRyoBJ46IDFf8i3wBeTsV6KaYIwR9a7ed o52HX95vBhVqVpOIM2MoTRDKVuf5UghA3xNAxZ1RsPyYmWMDJSBOQofqgKEj Oyh5RAUhTSb+I5JJp1vvl40QUj/g6m08v/TIrPNOLAwy6xj40GGzr9aof1ua rvRcgCk8OsLHURVeU+saAl/6cSzhRCYYj7spUcR90T903nR+FOg2Y3XE2kTk MGReGpm2MotXOPoeoUll4MlyswgH/M8pquQruhOsdHeAkZeoFNgz4G3NQAcc LCrQJEMxWUoWSrXICpt7PeEqnivc7g2tcwaRnb6xHfgvhnFb4cdSypd0ag1+ 2GuXqbfz1/hscyr2mEdyIgaEo8yrBYz5vZ5xB2+WttXG7f4/w4QBnBoRWkyi TsrYQj0sGZ3prBuwAUGCQiBkzrZv/5VHNcPvzWtJVhRa40xmVD8IS3FtB1VA BOoipUmO31BN+NeC0v42h8K589BiM3FHBUipf9DjC8m7Jeo7g8PtmI1hKgV2 sZ2FtmiWKXoej7Vpbyjrt7kA6N9ma8/VH0NGOakP8ycyr3T/16Cb/Wipy2km 4c/1tyGaY7u86AzGhOT86sBBWjeu9eytbFLmvI2Z8D29fzYH5SfHq8MJr6I4 yAyYvVkIqrOd9+/fSlIiH9bW0N49DQp7N2rb7wARAQABzSthbmRlckBwcm90 b25tYWlsLmNvbSA8YW5kZXJAcHJvdG9ubWFpbC5jb20+wsGNBBABCAAgBQJg azP/BgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQ9cggpSf3v5cWIQRp W1mJe1rHjmklbPj1yCClJ/e/lzlREACdTQlvG8hGb/c+c3MXYF2vW0ZB6BpO kdeSfXLdG4IffJYrxsSC3+WNZ8h/YTwXVlFV14KRf4nsSj5oI3aiJdiXQqQq O0TNcsIH8vI5k0YZapaUOj9b5Yscub8buHmp6v7t66h88gu67hddX6DhFM6q UMiqQQFqShE6r+mjJCxiK7gUq3UCJuatOcTjnBulXllSVdtWB4ocU2FWqJ9X xehRId85p/Grv4qpwZjP6OIUTngvNJ/aWW9aEsbwgqfsRCvnJ2C1UYIHY2Ol EPOjKZcUvmfSa5F3jRdLUX9xwBQTjpBsbmNP5t8W8WH4UWDrGArg/NNeGkdF tmm6XLgCG3YawuY/2uD8MiRWxtg/4I4rNldqg4EjpOsf6J8PVxJcIpLF87rb RGqkrAzEY9c59cHSnXfL/5WzrpZOE25tuSh8vfcz/bGWjcYBe/hNagirtgZW hL94we5z2yvBxwZZTORjW74dDHhl9g2GllcmRypaMjIVQxYEB6Pmbt7XztBe zH9bEGi4+z/sjbAUfy0ECFgVBEBDiQTcecvYX3tq2aOEzmFfT0iRmd+qCBJ0 3CaKGeBAVoqoX2J0SwbfN6lTZOj92lTnamJVqxeP2AgZvplHBCx1vclqayIz tllZBXU8TSvn98aqoba+7YSKVgbX2HaOZoEY3bjuoUeq6hapb7BdBM7BTQRg aiNsARAAsp89awg9uXbwzzDfvOIxCJ44pvHWKXMqz3O7E8UuiWvuXGfq7c3x qeq3oEBxBVjqqXcBGpHeZf0cH62vJz4Ioy8Fea0bcT7jy48Nr9535RA4ftuE Wb/SmKbQvVt1l1RxgCji0yK2By92l4yBXZqQO89E+bYySbJdVVLQMcOOfDxz b4n6PwkqSLYyr1YvEN+c8YkFg8Rmv0/Ug64XEMfM0VGNyhLKGJni3FR6z+GL mm3x+b7SvrLQolDhR3IgIMooHl+JzOjr9PfA05ACkU8En14WGRoiySo0uKPL JCj4OBKBImp0IHwX7j+Qf70NmULOMlj8qpmyaZ5JZNVLh2cn7hZXpINNCbUR CNpqd6Vi3rfhNqg6Rys9KLBOV4T/MJFt+hu0sXi3/LIl7Ap1VupyMe19OcdT YHKmzs7XiadE9u/pcGikuEhpjlI5ZeKaYmq2l3Eyk8yC6yXw4M5aKLzlc+Rf +VFYK8rSQnraghpsXfq+33+Eg4T8AYXJs3fM/zTGFAQKwom3drTqOvhACgEx cLzJ9woo+lkdfksYen5YRiBwePGznrGeboBr7TiVfH0yEEKf6lEzioyzJ93f yxk/XpqRttB62LdxRDH2Zhq/q+O8hke9Tij9cDPrIs+JSA4BzwHivkA3hQDt OT/i95XQnFoaL0uEu3/A0JPXFMbKypsAEQEAAcLBdgQYAQgACQUCYGsz/wIb DAAhCRD1yCClJ/e/lxYhBGlbWYl7WseOaSVs+PXIIKUn97+X5z8P/2zDwJ+f rcQZtaGvJPCuny9mGrHBF5wG4Jyn4JtTVMSAqLnjmBkvod3DlO7JCp7kBaLr wPi0BuU5HfSK3uEKVG3eZF3bswah5wes9nEb6MQzUfmG/ZJJ4G9FVIG4dsNb 79spaONXjAWNWmnWD38uqFGCMAmY3hKmnTo+rr0Ej72nS5MwSRXtfeMukU3V h2uXBGG1GENkDe6RmvJy+4X91S9i2+vxDQ638RyLDGJLghRCzf6hl76rC8Ug UtigQNKtDxaExSsl6DrEyGR/gCW9zjF7PZgUfba5dLK2QUGsjmuT0mkid7/e XRClJ8NRaR5z/oRGpdmlO7g+oxDC2rnkGp2j+SlZ3JmJ91R8gjAaEtFeza3M 5SvUkRdjMtZM/yfq75s6kHNZ0E1j/ry7J1HgT1gdIb41vxvehNPq1faWXy+f 5bgT7GsfEeHQl1cmonKy8GxbxTf46ujq7qrURs3fBwXdjGz39meSe3ccJ4DM XJg35/SVuUHaZ3M42GOChox2DGUDhJE2EY91SBmYOIxo79e8aUhzeBh1pTV2 cHEflYAZ0JJbp+UDS4rmMcxldzN8dEik++VTF44X7WYhAX2+3Xc4D2HZrGPU T2w65gyyIlsKXta58YR6VdML99tfd/pHhT749mo0fOegGnppk9wWLDEgnEzC WkGnoixKvJBAXL5d =HMin -----END PGP PUBLIC KEY BLOCK-----</description><content>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Version: OpenPGP.js v4.10.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Comment: https://openpgpjs.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xsFNBGBqI2wBEADdCsYZyfj3wgUnRyoBJ46IDFf8i3wBeTsV6KaYIwR9a7ed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>o52HX95vBhVqVpOIM2MoTRDKVuf5UghA3xNAxZ1RsPyYmWMDJSBOQofqgKEj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Oyh5RAUhTSb+I5JJp1vvl40QUj/g6m08v/TIrPNOLAwy6xj40GGzr9aof1ua
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rvRcgCk8OsLHURVeU+saAl/6cSzhRCYYj7spUcR90T903nR+FOg2Y3XE2kTk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MGReGpm2MotXOPoeoUll4MlyswgH/M8pquQruhOsdHeAkZeoFNgz4G3NQAcc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LCrQJEMxWUoWSrXICpt7PeEqnivc7g2tcwaRnb6xHfgvhnFb4cdSypd0ag1+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2GuXqbfz1/hscyr2mEdyIgaEo8yrBYz5vZ5xB2+WttXG7f4/w4QBnBoRWkyi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TsrYQj0sGZ3prBuwAUGCQiBkzrZv/5VHNcPvzWtJVhRa40xmVD8IS3FtB1VA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>BOoipUmO31BN+NeC0v42h8K589BiM3FHBUipf9DjC8m7Jeo7g8PtmI1hKgV2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sZ2FtmiWKXoej7Vpbyjrt7kA6N9ma8/VH0NGOakP8ycyr3T/16Cb/Wipy2km
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4c/1tyGaY7u86AzGhOT86sBBWjeu9eytbFLmvI2Z8D29fzYH5SfHq8MJr6I4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yAyYvVkIqrOd9+/fSlIiH9bW0N49DQp7N2rb7wARAQABzSthbmRlckBwcm90
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b25tYWlsLmNvbSA8YW5kZXJAcHJvdG9ubWFpbC5jb20+wsGNBBABCAAgBQJg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>azP/BgsJBwgDAgQVCAoCBBYCAQACGQECGwMCHgEAIQkQ9cggpSf3v5cWIQRp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>W1mJe1rHjmklbPj1yCClJ/e/lzlREACdTQlvG8hGb/c+c3MXYF2vW0ZB6BpO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kdeSfXLdG4IffJYrxsSC3+WNZ8h/YTwXVlFV14KRf4nsSj5oI3aiJdiXQqQq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>O0TNcsIH8vI5k0YZapaUOj9b5Yscub8buHmp6v7t66h88gu67hddX6DhFM6q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UMiqQQFqShE6r+mjJCxiK7gUq3UCJuatOcTjnBulXllSVdtWB4ocU2FWqJ9X
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xehRId85p/Grv4qpwZjP6OIUTngvNJ/aWW9aEsbwgqfsRCvnJ2C1UYIHY2Ol
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>EPOjKZcUvmfSa5F3jRdLUX9xwBQTjpBsbmNP5t8W8WH4UWDrGArg/NNeGkdF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tmm6XLgCG3YawuY/2uD8MiRWxtg/4I4rNldqg4EjpOsf6J8PVxJcIpLF87rb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RGqkrAzEY9c59cHSnXfL/5WzrpZOE25tuSh8vfcz/bGWjcYBe/hNagirtgZW
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hL94we5z2yvBxwZZTORjW74dDHhl9g2GllcmRypaMjIVQxYEB6Pmbt7XztBe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zH9bEGi4+z/sjbAUfy0ECFgVBEBDiQTcecvYX3tq2aOEzmFfT0iRmd+qCBJ0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3CaKGeBAVoqoX2J0SwbfN6lTZOj92lTnamJVqxeP2AgZvplHBCx1vclqayIz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tllZBXU8TSvn98aqoba+7YSKVgbX2HaOZoEY3bjuoUeq6hapb7BdBM7BTQRg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>aiNsARAAsp89awg9uXbwzzDfvOIxCJ44pvHWKXMqz3O7E8UuiWvuXGfq7c3x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>qeq3oEBxBVjqqXcBGpHeZf0cH62vJz4Ioy8Fea0bcT7jy48Nr9535RA4ftuE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Wb/SmKbQvVt1l1RxgCji0yK2By92l4yBXZqQO89E+bYySbJdVVLQMcOOfDxz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b4n6PwkqSLYyr1YvEN+c8YkFg8Rmv0/Ug64XEMfM0VGNyhLKGJni3FR6z+GL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mm3x+b7SvrLQolDhR3IgIMooHl+JzOjr9PfA05ACkU8En14WGRoiySo0uKPL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>JCj4OBKBImp0IHwX7j+Qf70NmULOMlj8qpmyaZ5JZNVLh2cn7hZXpINNCbUR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CNpqd6Vi3rfhNqg6Rys9KLBOV4T/MJFt+hu0sXi3/LIl7Ap1VupyMe19OcdT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>YHKmzs7XiadE9u/pcGikuEhpjlI5ZeKaYmq2l3Eyk8yC6yXw4M5aKLzlc+Rf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+VFYK8rSQnraghpsXfq+33+Eg4T8AYXJs3fM/zTGFAQKwom3drTqOvhACgEx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cLzJ9woo+lkdfksYen5YRiBwePGznrGeboBr7TiVfH0yEEKf6lEzioyzJ93f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yxk/XpqRttB62LdxRDH2Zhq/q+O8hke9Tij9cDPrIs+JSA4BzwHivkA3hQDt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OT/i95XQnFoaL0uEu3/A0JPXFMbKypsAEQEAAcLBdgQYAQgACQUCYGsz/wIb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DAAhCRD1yCClJ/e/lxYhBGlbWYl7WseOaSVs+PXIIKUn97+X5z8P/2zDwJ+f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rcQZtaGvJPCuny9mGrHBF5wG4Jyn4JtTVMSAqLnjmBkvod3DlO7JCp7kBaLr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wPi0BuU5HfSK3uEKVG3eZF3bswah5wes9nEb6MQzUfmG/ZJJ4G9FVIG4dsNb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>79spaONXjAWNWmnWD38uqFGCMAmY3hKmnTo+rr0Ej72nS5MwSRXtfeMukU3V
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h2uXBGG1GENkDe6RmvJy+4X91S9i2+vxDQ638RyLDGJLghRCzf6hl76rC8Ug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UtigQNKtDxaExSsl6DrEyGR/gCW9zjF7PZgUfba5dLK2QUGsjmuT0mkid7/e
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>XRClJ8NRaR5z/oRGpdmlO7g+oxDC2rnkGp2j+SlZ3JmJ91R8gjAaEtFeza3M
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5SvUkRdjMtZM/yfq75s6kHNZ0E1j/ry7J1HgT1gdIb41vxvehNPq1faWXy+f
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5bgT7GsfEeHQl1cmonKy8GxbxTf46ujq7qrURs3fBwXdjGz39meSe3ccJ4DM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>XJg35/SVuUHaZ3M42GOChox2DGUDhJE2EY91SBmYOIxo79e8aUhzeBh1pTV2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cHEflYAZ0JJbp+UDS4rmMcxldzN8dEik++VTF44X7WYhAX2+3Xc4D2HZrGPU
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T2w65gyyIlsKXta58YR6VdML99tfd/pHhT749mo0fOegGnppk9wWLDEgnEzC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WkGnoixKvJBAXL5d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>HMin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>