<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Walk on the Byte Side</title><link>https://ander94lakx.github.io/blog/</link><description>Recent content in Blogs on Walk on the Byte Side</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ander {at} protonmail {dot} com (Ander Granado)</managingEditor><webMaster>ander {at} protonmail {dot} com (Ander Granado)</webMaster><lastBuildDate>Sat, 19 Aug 2023 16:00:00 +0100</lastBuildDate><atom:link href="https://ander94lakx.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>The blog is now multilingual</title><link>https://ander94lakx.github.io/blog/2023-08-19-blog-multilingual/</link><pubDate>Sat, 19 Aug 2023 16:00:00 +0100</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2023-08-19-blog-multilingual/</guid><description>The title says it all, and this post is simply to announce it. From now on, all articles will be available in both English and Spanish.
That means that, on the one hand, existing articles have been translated into English and, on the other hand, new articles will be published in both languages. My intention is to keep this so that the whole blog is always in both languages.
The default language will be English, but it will always be possible to change it from the new selector that has just appeared at the top.</description><content>&lt;p>The title says it all, and this post is simply to announce it. From now on, all articles will be available in both English and Spanish.&lt;/p>
&lt;p>That means that, on the one hand, existing articles have been translated into English and, on the other hand, new articles will be published in both languages. My intention is to keep this so that the whole blog is always in both languages.&lt;/p>
&lt;p>The default language will be English, but it will always be possible to change it from the new selector that has just appeared at the top. Although English is the default language, if a person comes to the blog, the language will be determined by the language of their browser, so if you access from a browser in Spanish, the content will still appear in Spanish. For the rest of the cases, by default it will be shown in English.&lt;/p>
&lt;p>Although it may seem like more work for a blog with which I am anything but constant, I find it interesting to have it in both languages as it helps me to force myself to write and translate content into English (my mother tongue is Spanish), so it will help me to improve my level. Also, if one day I take this really seriously, having it in English can make the content reach a wider audience.&lt;/p>
&lt;p>In the future, if I manage to keep it up, I might consider doing something similar (although not completely) with some of the articles, but in Basque, although that&amp;rsquo;s something for the future.&lt;/p>
&lt;p>Finally, I apologise in advance if there are typos in English or if my way of writing in English is a bit odd. The content is not translated by professionals but by me (sometimes with tools, let&amp;rsquo;s not pretend we don&amp;rsquo;t), so it won&amp;rsquo;t be perfect (it&amp;rsquo;s not perfect in Spanish, less will be in English XD).&lt;/p>
&lt;p>&lt;em>Happy Hacking!&lt;/em>&lt;/p></content></item><item><title>How to monitor nearby bluetooth devices with a single command</title><link>https://ander94lakx.github.io/blog/2023-02-15-bluetooth-monitoring-command-linux/</link><pubDate>Thu, 16 Feb 2023 16:00:00 +0100</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2023-02-15-bluetooth-monitoring-command-linux/</guid><description>Aspaldiko! It&amp;rsquo;s been a long time since I&amp;rsquo;ve been around here, it&amp;rsquo;s been a busy few months (work, moving house, Christmas,&amp;hellip; a thousand things), but it was about time I got back to blogging a bit. Although I still have to continue the series on malware analysis, I&amp;rsquo;ve decided that, in the meantime, I&amp;rsquo;m going to post a few posts about some things I&amp;rsquo;ve been tinkering with lately, like this one, about monitoring bluetooth devices.</description><content>&lt;p>Aspaldiko! It&amp;rsquo;s been a long time since I&amp;rsquo;ve been around here, it&amp;rsquo;s been a busy few months (work, moving house, Christmas,&amp;hellip; a thousand things), but it was about time I got back to blogging a bit. Although I still have to continue the series on malware analysis, I&amp;rsquo;ve decided that, in the meantime, I&amp;rsquo;m going to post a few posts about some things I&amp;rsquo;ve been tinkering with lately, like this one, about monitoring bluetooth devices.&lt;/p>
&lt;p>I love Linux. With linux terminal you feel powerful. It&amp;rsquo;s not that I&amp;rsquo;m an expert using it, but when you know your way around it, you can do a lot of things.&lt;/p>
&lt;p>The other day I wanted to make a small script to monitor the bluetooth devices I have around me. I saw it as an interesting exercise to get data like how many devices I have around, see what kind of devices they are, how many devices are coming and going, and see what can be done with that information.&lt;/p>
&lt;p>My instinct when I wanted to do something like that is to make a script (damn programmers, always &lt;a href="https://www.npmjs.com/package/is-odd">reinventing the wheel&lt;/a>). The scripting language I&amp;rsquo;m most comfortable with is Python, so I thought I&amp;rsquo;d use it to do this. Then I figured that what I really wanted to do was just use the output of a command (&lt;code>bluetoothctl&lt;/code>), do four things and dump it into a file.&lt;/p>
&lt;p>Then I thought that, for that, what I should do is more like a shell script than using something as &lt;em>overkill&lt;/em> as Python. That way, I could use it all the time, less dependencies, etc.&lt;/p>
&lt;p>I wondered if a script was really necessary for this. Maybe between pipes, greps and transformations I could make an &lt;em>oneline&lt;/em> that I could put in an alias and that&amp;rsquo;s it. Sometimes, when I look for how to get certain info or how to do certain tasks in Linux, the results of sites like &lt;em>Super User&lt;/em> show people putting crazy commands to do all kinds of things, so I thought I could do the same, or at least try to do it. So today I&amp;rsquo;m going to explain how to set up a command to monitor the bluetooth devices around me.&lt;/p>
&lt;p>First things first. The bluetooth tool I used is &lt;code>bluetoothctl&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bluetoothctl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-1.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>If run, it can be seen that it works in interactive mode. To scan for devices, you simply use the &lt;code>scan on&lt;/code> subcommand, and it starts detecting devices that appear, disappear or change properties.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-2.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>Here comes the first problem. Since I want to redirect the output of this, interactive mode doesn&amp;rsquo;t work for me. In Bash (and other shells like Zsh, which I use), a &lt;code>--&lt;/code> indicates the end of commands, after which you can pass parameters. So, if you put the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bluetoothctl -- scan on
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-3.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>It already returns everything via standard output and without interactive mode.&lt;/p>
&lt;p>The next step is to start doing some transformations. First of all, I want to cut some parameters, dump this and filter some lines according to their content. For this I know that the best way is to use the advanced but intimidating &lt;code>awk&lt;/code>. I have seen some &lt;a href="https://www.youtube.com/watch?v=W5kr7X7EG4o">videos&lt;/a> about it but I have never used it beyond copy-pasting. Just to test it, I&amp;rsquo;ve tried using the option to print what it returns, as follows.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>bluetoothctl -- scan on | awk &lt;span style="color:#e6db74">&amp;#39;{print}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-4.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>Shit. Another problem. Nothing comes out. Looking on the internet, I see that the reason is a buffering issue. As the output is continuous, until the &lt;code>bluetoothctl&lt;/code> buffer is freed, the output is not redirected to &lt;code>awk&lt;/code>, so it is useless. Also looking on the internet, I see that I can solve this with &lt;code>stdbuf&lt;/code> and some specific arguments.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on | awk &lt;span style="color:#e6db74">&amp;#39;{print}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-5.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>(I will not go into the detailed explanation of all the commands and arguments, as I will never be able to do it as well as &lt;code>man&lt;/code> or other anonymous internet users).&lt;/p>
&lt;p>OK, now it works, so we can get serious. To show only certain parts, you can use the dollar syntax, which allows you to select certain parameters on each input line.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\ &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | awk &lt;span style="color:#e6db74">&amp;#39;{print $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-6.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>By selecting the first, third and fourth, only those fields are displayed. By default, the separator is the space, but if you want to specify or use any other separator, you can indicate it with &lt;code>-F&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{print $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-7.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>Knowing how to grab fields, I am now interested in grabbing only certain lines. You can set conditions for certain lines. I know that the lines I am interested in are the ones with &amp;ldquo;Device&amp;rdquo; in the second parameter. To put this in &lt;code>awk&lt;/code>, it is expressed before the &lt;code>print&lt;/code> command as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;$2 ~ /Device/ {print $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-8.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>You can even set several conditions, each with its own regex. In my case, the lines I&amp;rsquo;m interested in are the ones with a &lt;code>[NEW]&lt;/code> or a &lt;code>[DEL]&lt;/code>, which is what determines when a device is found and when it is not detected. This, together with the &amp;ldquo;Device&amp;rdquo;, limits perfectly what I am trying to monitor. To set this, you put it with &lt;code>&amp;amp;&amp;amp;&lt;/code> and limiting conditions in brackets. As regexes are used, the single pipe (&lt;code>|&lt;/code>) is used to say that any of these two values are valid, so it looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;($2 ~ /Device/ &amp;amp;&amp;amp; $1 ~ /[NEW]|[DEL]/) {print $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-11.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>So far so good, but a log is useless if it doesn&amp;rsquo;t have timestamps. &lt;code>awk&lt;/code> is so powerful that you can use some functions inside it (I don&amp;rsquo;t know if this is built-in of &lt;code>awk&lt;/code> or not, but it is amazing). In this case, I add to my &lt;code>print&lt;/code> a call to &lt;code>strftime()&lt;/code> with the format I like, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;($2 ~ /Device/ &amp;amp;&amp;amp; $1 ~ /[NEW]|[DEL]/) {print strftime(&amp;#34;%Y/%m/%d-%H:%M:%S-%Z&amp;#34;, systime()) &amp;#34;,&amp;#34; $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-10.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>At this point I&amp;rsquo;m already amazed at what can be done with a single line and by putting commands together (I&amp;rsquo;ve saved so many lines of Python with this). Now, the last thing I need to do is to dump it to a file.&lt;/p>
&lt;p>Something I was interested in was to dump it to a file but to see the output at the same time. For this &lt;code>tee&lt;/code> is perfect. We pass the output from &lt;code>awk&lt;/code> to &lt;code>tee&lt;/code> with a pipe and we&amp;rsquo;re done:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;($2 ~ /Device/ &amp;amp;&amp;amp; $1 ~ /[NEW]|[DEL]/) {print strftime(&amp;#34;%Y/%m/%d-%H:%M:%S-%Z&amp;#34;, systime()) &amp;#34;,&amp;#34; $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span> | tee -a bluetooth_scan_log.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-12.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>Shit. It doesn&amp;rsquo;t work. But wait, this sounds familiar. We have between &lt;code>awk&lt;/code> and &lt;code>tee&lt;/code> the same problem we had with &lt;code>bluetoothctl&lt;/code> and &lt;code>awk&lt;/code>, so we tried to solve it the same way and that&amp;rsquo;s it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>stdbuf -oL bluetoothctl -- scan on &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | stdbuf -oL awk -F&lt;span style="color:#e6db74">&amp;#39;[ ]&amp;#39;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;($2 ~ /Device/ &amp;amp;&amp;amp; $1 ~ /[NEW]|[DEL]/) {print strftime(&amp;#34;%Y/%m/%d-%H:%M:%S-%Z&amp;#34;, systime()) &amp;#34;,&amp;#34; $1 &amp;#34;,&amp;#34; $3 &amp;#34;,&amp;#34; $4}&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> | tee -a bluetooth_scan_log.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/bt-oneline/bt-oneline-13.png" alt="Bluetooth oneliner">&lt;/p>
&lt;p>And that&amp;rsquo;s it. Now we have the whole &amp;ldquo;system&amp;rdquo; set up. Once done, I have seen that there are several details to correct, like maybe taking just those parameters is not a good idea because the fourth parameter can be cut with spaces, or maybe I am not interested in filtering so much information.&lt;/p>
&lt;p>Anyway, that&amp;rsquo;s not the important thing. The essential thing is that, with a few commands, a bit of trial and error and our friends Google and &lt;code>man&lt;/code>, you can set up a lot of things, without having to do scripts or anything. This has several advantages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Use standard tools, which are available in most Linux distributions, which ensures that you can use it everywhere.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Less scripting. Don&amp;rsquo;t get me wrong, I love programming, but why do it if there are already solid and proven commands that allow you to do it. No need to reinvent the wheel, &lt;em>Keep It Simple, Stupid!&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Be able to put it as an alias (or &lt;em>oneline&lt;/em> function if quotes are too much trouble) in a &lt;code>.bashrc&lt;/code> (or &lt;code>.zshrc&lt;/code> in my case). Running this by typing a single word makes you feel very powerful.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>And that is all. I know, and I realised as I was doing it, that there are many ways to improve this. Some I&amp;rsquo;ve seen, some I haven&amp;rsquo;t even realised. My intention with this is just to show the beauty and the magic of using standard tools and the terminal, and how powerful these tools are to do a lot of things that, in the end, don&amp;rsquo;t need to be programmed.&lt;/p>
&lt;p>Whenever you are going to do something like this, ask yourself if someone would be able to do this with a command. If the answer to that question is yes, look for it, and if you can&amp;rsquo;t find it, open the terminal.&lt;/p>
&lt;p>&lt;em>Happy Hacking!&lt;/em>&lt;/p></content></item><item><title>Malware analysis (II) - Basic static analysis: strings and metadata</title><link>https://ander94lakx.github.io/blog/2022-09-11-malware-analysis-2/</link><pubDate>Sun, 11 Sep 2022 23:30:00 +0200</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-09-11-malware-analysis-2/</guid><description>The day has come. It&amp;rsquo;s time to pick up where I left off months ago and continue with the series on malware analysis. This is the second part of an article series. In the previous article, I discussed the basics, different techniques for malware analysis, how to obtain samples, and some basic programs for conducting this type of analysis.
First of all, it&amp;rsquo;s important to remember the different types of analysis that exist.</description><content>&lt;p>The day has come. It&amp;rsquo;s time to pick up where I left off months ago and continue with the series on malware analysis. This is the second part of an article series. In the &lt;a href="../2022-01-26-malware-analysis-1">previous article&lt;/a>, I discussed the basics, different techniques for malware analysis, how to obtain samples, and some basic programs for conducting this type of analysis.&lt;/p>
&lt;p>First of all, it&amp;rsquo;s important to remember the different types of analysis that exist. Basically, they can be divided into four different types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Static Analysis&lt;/strong>: Involves analysing information about the malware without examining its code or executing it, such as metadata, signatures, format, binary sections, etc.&lt;/li>
&lt;li>&lt;strong>Dynamic Analysis&lt;/strong>: Involves observing the behaviour of the malware while it&amp;rsquo;s running, including interactions with files, system calls, network traffic, registry changes, etc.&lt;/li>
&lt;li>&lt;strong>Code Analysis&lt;/strong>: Involves examining the code and is divided into two types:
&lt;ul>
&lt;li>&lt;strong>Static Code Analysis&lt;/strong>: Analysing the code without executing it.&lt;/li>
&lt;li>&lt;strong>Dynamic Code Analysis&lt;/strong>: Analysing the code while it&amp;rsquo;s running, essentially debugging it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s no strict rule about the order in which to apply these techniques or where to start. However, certain things make more sense to do before others. For instance, analysing code is not the easiest thing to do, so it&amp;rsquo;s not usually the first step. Dynamic analysis requires capturing a lot of information, so if you&amp;rsquo;re doing it locally, it makes sense to have some basic knowledge about the sample being analysed in order to focus your information collection processes: deciding which elements to monitor and prioritizing which information to analyse first.&lt;/p>
&lt;p>The simplest type of analysis that can be performed is &lt;strong>static analysis&lt;/strong>. It doesn&amp;rsquo;t require analysing the code or setting up a range of monitoring programs. Using only static analysis, a lot of information about the file type, interesting metadata, and potential type of malware can be extracted.&lt;/p>
&lt;p>As a result, these techniques are usually the first ones to be applied because they are quick and allow to perform &lt;strong>malware classification&lt;/strong>. What does classifying malware involve? Analysing malware serves two main purposes: firstly, to determine the type of malware and where it fits within the broader landscape of existing malware (&amp;ldquo;family&amp;rdquo; of malware it belongs to), and secondly, to understand its behaviour and learn from it. The former is what&amp;rsquo;s called classification.&lt;/p>
&lt;p>This is because, in general, malware samples tend to be variations of other samples. In programming, the more you can recycle, the better, and malware is no exception. Searching for patterns, signatures, and characteristics that have been found in other samples allows us to identify the type of malware much earlier than having to examine its code or behaviour, saving a lot of time. Furthermore, if the type of malware is known, analysing its code becomes easier (since you already know the features and peculiarities you&amp;rsquo;re looking for), and you can already have hints about its behaviour based on how similar malware behaves.&lt;/p>
&lt;h1 id="requirements">Requirements&lt;/h1>
&lt;p>With all this in mind, let&amp;rsquo;s see how we can obtain basic information from a sample. For this, obviously, a malware sample is required. I&amp;rsquo;m going to use one that I analysed in the past, a &lt;a href="https://bazaar.abuse.ch/sample/7faeb64c50cd15d036ca259a047d6c62ed491fff3729433fefba0b02c059d5ed/">Ryuk ransomware&lt;/a> sample. The SHA-256 hash of the sample is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>7faeb64c50cd15d036ca259a047d6c62ed491fff3729433fefba0b02c059d5ed
&lt;/code>&lt;/pre>&lt;p>Any sample will do for this purpose, but the results will vary depending on the sample used. Obviously, since samples obtained from malware repositories like this one are already known, we&amp;rsquo;ve essentially spoiled what kind of sample it is. Analysing an unknown sample would not have this advantage. Nevertheless, the interesting part is to see to what extent we can extract information from the sample ourselves.&lt;/p>
&lt;p>On the other hand, a secure environment is necessary to analyze the sample. To achieve this, a virtualized environment is required. The previous article mentioned several options. Even though the sample is for Windows in this case, this part can be done with both Linux and Windows machines, as for now, we&amp;rsquo;re not going to execute anything. For the dynamic analysis part, a Windows virtual machine is needed. In my case, to showcase a bit of both, I&amp;rsquo;m going to use both a Windows and a Linux virtual machine, specifically Remnux. I like to combine both as there are tools that are only available on one system or the other. Additionally, I&amp;rsquo;m more comfortable with the Linux terminal, but sometimes I prefer certain programs on Windows. As long as we use the same sample on both machines, there&amp;rsquo;s no issue. We can verify that we have the same sample on both by checking the integrity of the sample using its hash.&lt;/p>
&lt;p>With this in place, let&amp;rsquo;s begin diving into the sample.&lt;/p>
&lt;h1 id="obtaining-the-hashes">Obtaining the hashes&lt;/h1>
&lt;p>The first step is to calculate the hashes of the sample. If obtained from a repository, you already have the hash, and it&amp;rsquo;s just a matter of verifying it for integrity purposes, i.e., ensuring that you have the desired sample. This can be done with various tools such as 7Zip or HashCalc for Windows, or you can use built-in commands available on certain systems, like most Linux distributions.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-hashes-linux.png" alt="Linux Hashes" title="Hash calculation in Linux">&lt;/p>
&lt;p>If using multiple machines, it&amp;rsquo;s recommended to perform this step on all of them to ensure consistency across the loaded samples.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-hashes-windows.png" alt="Windows Hashes" title="Hash calculation in Windows">&lt;/p>
&lt;p>Okay, now we have the sample on our system and ready for analysis. Where should we start?&lt;/p>
&lt;p>In reality, as I mentioned before, there&amp;rsquo;s no defined order for this, but there are some basic processes that can be done quickly and tend to be among the first steps taken. These steps are chosen due to their simplicity as well as the information they might provide for more complex types of analysis, like code or behavioural analysis. In this part, we&amp;rsquo;ll cover a couple of basic static analysis techniques: &lt;strong>analysing strings and metadata&lt;/strong>.&lt;/p>
&lt;h1 id="file-type">File Type&lt;/h1>
&lt;p>Even though we know in this case that it&amp;rsquo;s a malware sample for Windows, it&amp;rsquo;s generally a good practice to determine the type of sample you&amp;rsquo;re dealing with. If the sample were unknown, this could help us understand whether it&amp;rsquo;s a binary or not, and for the former case, which architecture and operating system it&amp;rsquo;s intended for. Depending on this, different machines, tools, and techniques might be required. The simplest way is to use something like the &lt;code>file&lt;/code> command in Linux.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-file.png" alt="File Type" title="File Type">&lt;/p>
&lt;p>This confirms what we already knew, that it&amp;rsquo;s a 32-bit Windows executable. It&amp;rsquo;s mentioned that it&amp;rsquo;s a PE32 executable. Later on, we&amp;rsquo;ll delve into the details of the PE32 binary format and how to analyze its structure in more detail to extract information about this type of sample. For now, since we know it&amp;rsquo;s a binary, let&amp;rsquo;s try to extract its strings.&lt;/p>
&lt;h1 id="strings-analysis">Strings Analysis&lt;/h1>
&lt;p>Anyone who has ever programmed has had to read code.&lt;/p>
&lt;p>In fact, most of the time, developers spend more time reading code than writing it. Any programmer with even a bit of experience has sat down in front of some codebase to understand how a program works because they&amp;rsquo;ve been handed a project at work, forked a project to extend it, or are reading a Stack Overflow answer. Regardless of the reason, one of the easiest ways to understand what code does is to look at the messages it displays or the strings it contains. Those prints and logs that gives info to users and developers also gives info to other programmers. Therefore, one of the most basic things you can do when analysing malware is to analyze strings.&lt;/p>
&lt;p>However, there&amp;rsquo;s an issue. Usually, the malware samples you&amp;rsquo;ll encounter are compiled samples. They won&amp;rsquo;t make your day by showing you their code. So, how do you do it? Reverse engineering?&lt;/p>
&lt;p>Yes and no. Although reverse engineering can yield disassembled code or even higher-level code, it&amp;rsquo;s not yet necessary. A string is essentially a sequence of bytes with a specific encoding, such as ASCII or UTF-8. By attempting to interpret the bytes using a specific encoding to see if we get readable text, we can potentially find strings.&lt;/p>
&lt;p>Obviously, we shouldn&amp;rsquo;t do this manually. There are many tools for this purpose. Many hexadecimal editors offer string search options. On Windows, the easiest way is to use &lt;strong>&lt;code>strings.exe&lt;/code>&lt;/strong>, a &lt;a href="https://docs.microsoft.com/en-us/sysinternals/">SysInternal&lt;/a> tool for Windows that extracts strings from a binary. SysInternals tools are powerful tools for both Windows system administrators and malware analysts. Having them in your toolbox is a must. The equivalent of this tool on Linux is the &lt;code>strings&lt;/code> command.&lt;/p>
&lt;p>Running it on the binary will show the detected strings (I&amp;rsquo;ve shortened the output as it generates a lot of noise and false positives).&lt;/p>
&lt;pre tabindex="0">&lt;code>!This program cannot be run in DOS mode.
.text
.rdata
@.data
.rsrc
DllUnregisterServer
catsrv.dll
IsProcessorFeaturePresent
GlobalUnlock
GetUserDefaultUILanguage
GetCurrentProcess
QueryPerformanceCounter
GetFileAttributesW
LoadLibraryExW
CloseHandle
InitializeCriticalSectionAndSpinCount
InitializeSListHead
GetCurrentThreadId
LoadLibraryA
TerminateProcess
CreateEventW
GetModuleHandleW
GetProcAddress
SetUnhandledExceptionFilter
VirtualProtectEx
UnhandledExceptionFilter
GlobalAlloc
GlobalLock
DeleteCriticalSection
IsDebuggerPresent
GetModuleFileNameW
GetCurrentProcessId
GetLastError
OutputDebugStringW
GetStartupInfoW
kernel32.dll
DllGetClassObject
msident.dll
CoUninitialize
CoInitialize
CoCreateGuid
ole32.dll
UuidCreate
rpcrt4.dll
CloseClipboard
EnableWindow
DrawIcon
IsIconic
EmptyClipboard
OpenClipboard
GetClientRect
SendMessageW
GetSystemMenu
GetParent
GetForegroundWindow
SetClipboardData
LoadIconW
AppendMenuW
GetSystemMetrics
user32.dll
&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;UTF-8&amp;#39; standalone=&amp;#39;yes&amp;#39;?&amp;gt;
&amp;lt;assembly xmlns = &amp;#39;urn:schemas-microsoft-com:asm.v1&amp;#39; manifestVersion = &amp;#39;1.0&amp;#39;&amp;gt;
&amp;lt;trustInfo xmlns = &amp;#34;urn:schemas-microsoft-com:asm.v3&amp;#34;&amp;gt;
&amp;lt;security&amp;gt;
&amp;lt;requestedPrivileges&amp;gt;
&amp;lt;requestedExecutionLevel level = &amp;#39;asInvoker&amp;#39; uiAccess = &amp;#39;false&amp;#39; /&amp;gt;
&amp;lt;/requestedPrivileges&amp;gt;
&amp;lt;/security&amp;gt;
&amp;lt;/trustInfo&amp;gt;
&amp;lt;/assembly&amp;gt;
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA0
070615000000Z
120614235959Z0\1
VeriSign, Inc.1402
+VeriSign Time Stamping Services Signer - G20
http://ocsp.verisign.com0
&amp;#34;http://crl.verisign.com/tss-ca.crl0
TSA1-20
Western Cape1
Durbanville1
Thawte1
Thawte Certification1
Thawte Timestamping CA0
031204000000Z
131203235959Z0S1
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA0
http://ocsp.verisign.com0
0http://crl.verisign.com/ThawteTimestampingCA.crl0
TSA2048-1-530
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA0
Moscow1
Moscow1
Kaspersky Lab1&amp;gt;0&amp;lt;
5Digital ID Class 3 - Microsoft Software Validation v21
Technical dept1
Kaspersky Lab0
3http://csc3-2009-2-crl.verisign.com/CSC3-2009-2.crl0D
https://www.verisign.com/rpa0
http://ocsp.verisign.com0?
3http://csc3-2009-2-aia.verisign.com/CSC3-2009-2.cer0
VeriSign, Inc.1705
.Class 3 Public Primary Certification Authority0
090521000000Z
190520235959Z0
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA0
https://www.verisign.com/cps0*
https://www.verisign.com/rpa0
#http://logo.verisign.com/vslogo.gif0
http://ocsp.verisign.com01
http://crl.verisign.com/pca3.crl0)
Class3CA2048-1-550
xEv1
Washington1
Redmond1
Microsoft Corporation1)0&amp;#39;
Microsoft Code Verification Root0
060523170129Z
160523171129Z0_1
VeriSign, Inc.1705
.Class 3 Public Primary Certification Authority0
Dhttp://crl.microsoft.com/pki/crl/products/MicrosoftCodeVerifRoot.crl0
VeriSign, Inc.1
VeriSign Trust Network1;09
2Terms of use at https://www.verisign.com/rpa (c)09100.
&amp;#39;VeriSign Class 3 Code Signing 2009-2 CA
VeriSign, Inc.1+0)
&amp;#34;VeriSign Time Stamping Services CA
100907170408Z0#
&lt;/code>&lt;/pre>&lt;p>There are strings that will almost always appear, like the DOS headers (the &lt;code>&amp;quot;!This program cannot be run in DOS mode&amp;quot;&lt;/code> is a compatibility mechanism from Microsoft that has been present for decades) or some that are simply false positives. What&amp;rsquo;s interesting is to see if any of these strings provide information about what the binary does.&lt;/p>
&lt;p>Among all the observed strings, you can notice two types of strings:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>References to libraries and functions&lt;/strong>: In a binary, it&amp;rsquo;s common to find references to functions from external libraries, as programs often need external libraries (whether from the system or not) to perform certain tasks. These functions can provide hints about the capabilities of the binary—what things it can do. For example, if it contains functions to interact with files, it can interact with files. However, this doesn&amp;rsquo;t show all the capabilities a binary might have, as there are ways to hide this, which we&amp;rsquo;ll see later.&lt;/li>
&lt;li>&lt;strong>Information about certificates&lt;/strong> (mentions of VeriSign, Microsoft, etc.): This might indicate that the binary is signed. Signing a binary is a way to evade antivirus systems. We can verify if it&amp;rsquo;s signed using various tools.&lt;/li>
&lt;/ul>
&lt;p>As you can see in this case, unfortunately, the strings don&amp;rsquo;t seem to provide much information about what the binary does. No strings specific to the program, like output messages or program variables, have been detected. In such cases, there are two possibilities: either the sample doesn&amp;rsquo;t contain interesting strings, or they are obfuscated. Regardless, it&amp;rsquo;s always a good idea to try various methods for string extraction. Using SysInternal&amp;rsquo;s tool is the simplest approach. If you use different applications, like PEStudio, and compare the results among them, you might get more insights.&lt;/p>
&lt;p>But if the strings are obfuscated, how can you detect them? There are tools designed to detect this type of obfuscated strings. If common techniques have been used, such as using a code packer (like UPX) or simple obfuscation techniques (like XOR-ing the binary data), such tools might be able to detect them. Tools like &lt;strong>FLOSS&lt;/strong> can be used to search for this kind of data.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-strings-floss.png" alt="FLOSS strings" title="FLOSS for string analysis">&lt;/p>
&lt;p>For the sake of brevity, I haven&amp;rsquo;t included the full FLOSS output here, but the tool doesn&amp;rsquo;t detect more strings than what &lt;code>strings&lt;/code> found. At this point, it seems with this sample we haven&amp;rsquo;t had much luck. The absence of easily discoverable strings could indicate the use of obfuscation techniques. Obfuscating both data and code is common in the world of malware (and not only in the malware world—these techniques are also used to protect intellectual property, for example). In any case, in the upcoming parts, we&amp;rsquo;ll delve more into detecting obfuscations, such as analysing binary sections and entropy analysis.&lt;/p>
&lt;h1 id="metadata">Metadata&lt;/h1>
&lt;p>As this is getting quite lengthy, I&amp;rsquo;ll only cover one more basic aspect in this part: metadata analysis. Like any file, malware samples can contain interesting metadata. I say &amp;ldquo;can&amp;rdquo; because they might have been removed, overwritten by another system, or even deliberately modified to make the analysis more difficult. Even tho, it&amp;rsquo;s always worth analysing them to see if there&amp;rsquo;s any information to be found.&lt;/p>
&lt;p>There are countless applications for metadata analysis. The simplest way (and one we&amp;rsquo;ve all used at some point) is the classic method of right-clicking on the file and viewing its properties. There are also applications that allow you to do this and present the information in a more detailed and organized manner. Personally, I like to use &lt;strong>PEStudio&lt;/strong> (which, among many other features, also displays metadata) and &lt;strong>ExifTool&lt;/strong>, which is well-known for extracting metadata not only from binaries but from any kind of file (as the name suggests, it&amp;rsquo;s commonly used for analysing photo metadata).&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-metadata-remnux.png" alt="ExifTool metadata" title="Metadata with ExifTool">&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-metadata-pestudio.png" alt="PEStudio metadata" title="Metadata with PEStudio">&lt;/p>
&lt;p>In the metadata, we don&amp;rsquo;t see anything highly relevant, but we do see information about a Microsoft certificate, suggesting that the binary might be signed. You can verify this in various ways, such as using the file properties or with functions like &lt;code>Get-AuthenticodeSignature&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-certificate-properties.png" alt="Certificate Properties" title="Checking the certificate in file properties">&lt;/p>
&lt;p>If done through file properties, in the case of a valid certificate, the properties would show a new tab with information about the certificate. In this case, it doesn&amp;rsquo;t seem to have a certificate.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/malware-2-certificate-powershell.png" alt="PowerShell Certificate" title="Checking the certificate using PowerShell">&lt;/p>
&lt;p>Checking with PowerShell gives us the same result. This doesn&amp;rsquo;t necessarily mean it&amp;rsquo;s not signed; it could be because the signature is expired or the certificate used isn&amp;rsquo;t valid. Even if it&amp;rsquo;s supposedly signed with a Microsoft certificate, if these certificates are compromised (which has happened before), they&amp;rsquo;re revoked, so systems won&amp;rsquo;t consider them valid. In this case, based on the metadata information, it seems to be the case.&lt;/p>
&lt;h1 id="conclusions">Conclusions&lt;/h1>
&lt;p>Starting with malware analysis is a relatively straightforward task (don&amp;rsquo;t worry, it&amp;rsquo;s going to get more complex). Although we haven&amp;rsquo;t obtained much information so far, the fact that we haven&amp;rsquo;t found clues in the strings or the presence of a suspicious certificate already gives us hints that the file is malicious (in this case, we already knew, but when analysing unknown samples, these are interesting clues).&lt;/p>
&lt;p>However, static analysis is just getting started. In the next part, I intend to delve more into these techniques, technically analysing the binary and its sections, and going into more detail on how to detect obfuscation techniques. We&amp;rsquo;ll talk about concepts like entropy.&lt;/p>
&lt;p>But for now, stay safe and happy hacking!&lt;/p>
&lt;h1 id="more-posts">More posts&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="../2022-01-26-malware-analysis-1">Malware analysis (I) - How to get started in malware analysis&lt;/a>&lt;/li>
&lt;li>Malware analysis (II) - Basic static analysis: strings and metadata&lt;/li>
&lt;li>&lt;a href="../2022-09-18-malware-analysis-3">Malware analysis (III) - Static analysis: PE32 binary format, entropy and obfuscation technique indicators&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul></content></item><item><title>Migrating to Hugo</title><link>https://ander94lakx.github.io/blog/2022-08-14-blog-update-hugo/</link><pubDate>Sun, 14 Aug 2022 14:49:32 +0200</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-08-14-blog-update-hugo/</guid><description>Hello, aspaldiko! It&amp;rsquo;s been a while since I last posted anything, despite having several ideas in mind and others that I left unfinished (like the series on malware analysis, for example), so it was about time to pick it up again.
First things first, I think it was time to give the blog a little refresh. A while back, I migrated it from Jekyll to Gatsby to modernize it a bit, but I&amp;rsquo;d been wanting to use something simpler for a while.</description><content>&lt;p>Hello, aspaldiko! It&amp;rsquo;s been a while since I last posted anything, despite having several ideas in mind and others that I left unfinished (like the series on malware analysis, for example), so it was about time to pick it up again.&lt;/p>
&lt;p>First things first, I think it was time to give the blog a little refresh. A while back, I migrated it from Jekyll to Gatsby to modernize it a bit, but I&amp;rsquo;d been wanting to use something simpler for a while. Not that Gatsby is bad in itself, but it seems to generate too many files for something that should be straightforward, so I looked for alternatives.&lt;/p>
&lt;p>I&amp;rsquo;ve known about &lt;a href="https://gohugo.io/">Hugo&lt;/a> for a while, which is advertised as the world&amp;rsquo;s fastest website generator, using Go behind the scenes. Honestly, speed isn&amp;rsquo;t my main concern, but if it generates fewer files and is simpler to use, then it&amp;rsquo;s better. Also, diving into Gatsby without knowing much about React felt a bit daunting.&lt;/p>
&lt;p>One of the great things about Hugo is its theme system. You can change themes by cloning repos or adding them as submodules, and it&amp;rsquo;s much easier to handle than in Gatsby. Moreover, the &amp;ldquo;terminal&amp;rdquo; theme I&amp;rsquo;ve chosen looks pretty good, it&amp;rsquo;s minimalist, has that retro touch I like, and still remains modern. If I want to change the look in the future, it&amp;rsquo;s as simple as adding another theme, and that&amp;rsquo;s it. I&amp;rsquo;m not much of a frontend dev, so being able to maintain a good appearance without having to tinker too much is a big advantage.&lt;/p>
&lt;p>On the other hand, another advantage is that you just need to set up your GitHub Action in the repository to build it and push it to the GitHub Pages branch, making it really quick. Just push the changes and forget about it.&lt;/p>
&lt;p>Still, all of this is just a facelift. The most important thing about a blog is always its content, so this is just a tune-up to get back into blogging, which was long overdue.&lt;/p>
&lt;p>In the coming days, I&amp;rsquo;ll be uploading a few things to get back into &amp;ldquo;regular&amp;rdquo; posting.&lt;/p>
&lt;p>See you soon!&lt;/p>
&lt;p>Happy hacking!&lt;/p></content></item><item><title>How to get your Top tracks (or whatever info) out of your Spotify account</title><link>https://ander94lakx.github.io/blog/2022-02-13-spotify-data-top-songs/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-02-13-spotify-data-top-songs/</guid><description>I&amp;rsquo;m heavily into web scraping, I know, but this time it&amp;rsquo;s something a bit different. It&amp;rsquo;s not your typical web scraping; it&amp;rsquo;s a small example of how to extract information about your own data. You can get some very interesting insights from the data we generate daily. For instance, in my case, I use Spotify daily to listen to music. I never leave home without headphones, and I even wear them in the bathroom, so I generate a certain amount of data while using Spotify.</description><content>&lt;p>I&amp;rsquo;m heavily into web scraping, I know, but this time it&amp;rsquo;s something a bit different. It&amp;rsquo;s not your typical web scraping; it&amp;rsquo;s a small example of how to extract information about your own data. You can get some very interesting insights from the data we generate daily. For instance, in my case, I use Spotify daily to listen to music. I never leave home without headphones, and I even wear them in the bathroom, so I generate a certain amount of data while using Spotify.&lt;/p>
&lt;h2 id="downloading-your-information">Downloading Your Information&lt;/h2>
&lt;p>Many applications allow users to download the information they generate. For most European citizens, it&amp;rsquo;s worth mentioning that practically all applications enable this, as it&amp;rsquo;s a right granted by &lt;a href="https://support.spotify.com/es/article/gdpr-article-15-information/">Article 15&lt;/a> of the European Union&amp;rsquo;s GDPR. This means that nearly all online services let you download a copy of your data, at least in this part of the world.&lt;/p>
&lt;p>This is interesting because it lets you extract information that the applications and services have about you but don&amp;rsquo;t display through their interfaces. For instance, in the case of Spotify, you can download your &lt;a href="https://support.spotify.com/es/article/data-rights-and-privacy-settings/">main data&lt;/a>, including things like your playback history for the last year. It&amp;rsquo;s important to note that in Spotify&amp;rsquo;s case, the data you get with their tool for downloading data isn&amp;rsquo;t complete, but you can request absolutely everything by &lt;a href="mailto:privacy@spotify.com">contacting them directly&lt;/a>.&lt;/p>
&lt;p>This way, something that can&amp;rsquo;t be seen within the Spotify app can be done through the data they allow you to download. Typically, this kind of data comes in formats like JSON or XML to interact with it programmatically. Sometimes, they even provide options for the format, as is the case with Instagram, where you can download a version in HTML (useful for having a backup) or in JSON (if you want to work with the data).&lt;/p>
&lt;h2 id="extracting-most-listened-content-from-spotifys-information">Extracting Most Listened Content from Spotify&amp;rsquo;s Information&lt;/h2>
&lt;p>Getting back to Spotify, you can extract a lot of information from this data. In my case, as a starting point to tinker with the data, I&amp;rsquo;ve simply programmed a script to see what my top listened songs and artists are. Some might think that Spotify already provides this in their annual &amp;ldquo;wrapped&amp;rdquo; summaries or in some generated playlists. In part, this is true, but it&amp;rsquo;s given to you &amp;ldquo;their way.&amp;rdquo; Meaning, you might know your Top 5 most listened-to artists, but not the Top 10, or how many times you&amp;rsquo;ve listened to a certain artist, or how much you&amp;rsquo;ve listened to an artist that&amp;rsquo;s not in your top list, etc. The power of having all the data in your hands is that you can &lt;strong>extract the information you want and how you want it&lt;/strong>.&lt;/p>
&lt;p>In this case, I&amp;rsquo;ve tried with basic data, which has limited information. If you request the copy with all the information, you can obtain a lot more data. In Spotify&amp;rsquo;s &lt;a href="https://support.spotify.com/es/article/understanding-my-data/">documentation&lt;/a>, you can see exactly what data they offer in both cases. For the case of basic data, Spotify provides a zip file with a handful of JSON files.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/spotify_data.png" alt="Spotify Data" title="Basic data provided by Spotify">&lt;/p>
&lt;p>Among the files provided by Spotify, the ones relevant for this PoC are named &lt;code>StreamingHistory[x].json&lt;/code>. These files contain the playback history. The information regarding the song is quite limited but enough to identify it. The file has a format like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 11:10&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Hüsker Dü&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Don&amp;#39;t Want to Know If You Are Lonely&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">212426&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:16&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Go With The Flow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">4890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:23&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Go With The Flow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">190646&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;endTime&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;2021-02-05 12:24&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;artistName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Queens of the Stone Age&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;trackName&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;Make It Wit Chu&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;msPlayed&amp;#34;&lt;/span> : &lt;span style="color:#ae81ff">19403&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And so on infinitely. It provides the timestamp, song name, artist, and playback time. This last piece is interesting because you can set a minimum threshold to consider a song as listened, for example. You can also play around with the timestamp to see when you&amp;rsquo;ve listened to more or less music. The possibilities are vast.&lt;/p>
&lt;p>With this, the script I&amp;rsquo;ve created to get the top most listened songs and artists is as follows:&lt;/p>
&lt;p>&lt;code>gist:ander94lakx/63776dacd6e986d935b9f01fff755921#spotify_top_songs_and_artists.py&lt;/code>&lt;/p>
&lt;p>I don&amp;rsquo;t think it&amp;rsquo;s worth going into detail about the code since it&amp;rsquo;s quite simple, and most of it is self-explanatory. It&amp;rsquo;s basically a function that performs a series of steps that can be summarized as follows:&lt;/p>
&lt;ol>
&lt;li>Manage an argument to configure the size of the Top.&lt;/li>
&lt;li>Read the files and load JSON information into dictionaries.&lt;/li>
&lt;li>Perform calculations on the loaded information.&lt;/li>
&lt;li>Sort, prepare, and display the top listened songs and artists.&lt;/li>
&lt;/ol>
&lt;p>Certainly, there might be many ways to improve it. You could unify the part where you fetch the data with the part where you calculate the playbacks, but I wanted to keep it separate to make it easier to understand. Additionally, my Python skills aren&amp;rsquo;t perfect, and some things with sets (among many others) could probably be done better.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Having access to the data you generate in an application enables you to extract a lot of information. Applications and services know this and use the data to extract insights for their benefit. At the very least, since they process user information, they should allow users to do the same.&lt;/p>
&lt;p>Moreover, this allows you to extend the capabilities offered by the applications themselves. In Spotify&amp;rsquo;s case, you could analyze the music you listen to, how you listen to it, or how your listening habits have changed over time – things Spotify doesn&amp;rsquo;t offer its users. Similarly, you can do more of the same with other applications. The ability to obtain your own information is the first step to being able to handle it in your own way.&lt;/p>
&lt;p>There are surely a thousand examples of interesting cases where this type of application-generated information can be used. If you&amp;rsquo;re reading this, I invite you to download your information from the applications you use, take a look, and think about the interesting uses you can make of it. Information is power, and users should have that power too.&lt;/p>
&lt;p>Don&amp;rsquo;t stop downloading what belongs to you!&lt;/p>
&lt;p>Happy hacking!&lt;/p></content></item><item><title>How to automate flat-hunting with a Telegram bot</title><link>https://ander94lakx.github.io/blog/2022-02-05-bot-telegram-find-flat/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-02-05-bot-telegram-find-flat/</guid><description>I am looking for a flat. Looking for a flat is a shitty process. There is a strangely small number of flats in my city and the ones that are available disappear quickly.
I&amp;rsquo;m too lazy to spend all my time looking for a flat. It&amp;rsquo;s not really that complicated, but sometimes I&amp;rsquo;m busy and I forget to look that day, or I&amp;rsquo;m out and it&amp;rsquo;s more hassle with my phone.</description><content>&lt;p>I am looking for a flat. Looking for a flat is a shitty process. There is a strangely small number of flats in my city and the ones that are available disappear quickly.&lt;/p>
&lt;p>I&amp;rsquo;m too lazy to spend all my time looking for a flat. It&amp;rsquo;s not really that complicated, but sometimes I&amp;rsquo;m busy and I forget to look that day, or I&amp;rsquo;m out and it&amp;rsquo;s more hassle with my phone.&lt;/p>
&lt;p>I&amp;rsquo;ve been wanting to make a Telegram bot for a while now. I didn&amp;rsquo;t know exactly what to do, but the other day I got an idea and I created a bot that tells me about the available flats in my city.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/scraping_telegram_python_bot.jpg" alt="Scraping Python Telegram bot" title="Scraping Telegram bot made with Python">&lt;/p>
&lt;p>There are two parts involved in this. One is the web scraping part. This is basically automating the extraction of information from websites. Nowadays almost everything is done from the internet and looking for a flat is not going to be any different. Practically all local real estate agencies and individuals who rent flats post their ads on certain platforms (in Spain maily in platforms such as Idealista or Fotocasa), so by consulting there I can see what new options are appearing. It&amp;rsquo;s basically what I was doing so far manually and without enough constancy. Automating it with web scraping allows me to get all that information at a glance.&lt;/p>
&lt;p>The other part is the Telegram bot. Until two days ago I had no idea how it worked. Basically Telegram has a great API so you can do everything with it. You can create bots that run anywhere to communicate directly with users, write in chats or channels and do a lot of things. There is also a very good &lt;a href="https://github.com/python-telegram-bot/python-telegram-bot">wrapper for Python&lt;/a> that you can use to interact with the API from Python in a very simple way.&lt;/p>
&lt;h2 id="part-1-web-scraping-with-selenium">Part 1: web scraping with Selenium&lt;/h2>
&lt;p>It&amp;rsquo;s not the first time I have done web scraping. Some time ago I made a script that allowed to scrape instagram to download all the images of a user. You can have a look at the &lt;a href="https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/">post&lt;/a> I made or the &lt;a href="https://github.com/ander94lakx/InstaBot">code&lt;/a> of the bot (it&amp;rsquo;s a bot, but it&amp;rsquo;s not a Telegram bot).&lt;/p>
&lt;p>When I made that script I used &lt;a href="https://www.selenium.dev/">Selenium&lt;/a>, which is probably the best web scraping tool out there. It&amp;rsquo;s not just for that, but it allows you to automate browser operations. With this, you can open websites, browse them, perform actions and extract information from them programmatically. This is much better than directly sending a request with a request handling library, because by actually launching an instance of a browser, you can bypass measures that some websites have in place to block automated mechanisms. The downside is that, since you have to open a browser, you can&amp;rsquo;t run it in an environment that doesn&amp;rsquo;t have a screen (although this can be easily solved with screen-simulating libraries such as &lt;a href="https://pypi.org/project/PyVirtualDisplay/">PyVirtualDisplay&lt;/a>).&lt;/p>
&lt;p>With the tools ready and installed, all that remains is to use Selenium to start web scraping. The simpler the scraping the better. In this case, instead of passing the base URL of a flat search site, you can extract the URLs with the parameters to filter the search. In my case, and using Idealista as an example, the URL would be something like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>https://www.idealista.com/alquiler-viviendas/vitoria-gasteiz-alava/?ordenado-por&lt;span style="color:#f92672">=&lt;/span>precios-asc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, I am already filtering by my city, and apart from that, I&amp;rsquo;m sorting by price to display the cheapest ones first (there&amp;rsquo;s not much money around here). This could be narrowed down even further. Since most websites of this kind use search parameters in the URL itself (i.e. query parameters, very useful for save as bookmarks later), a lot of scraping work can be saved by simply targeting the endpoint with specific query parameters.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/idealista_web.png" alt="Idealista Results" title="Search results using Idealista">&lt;/p>
&lt;p>With that in mind, I&amp;rsquo;ve created a simple function that scrapes that page and retrieves flat-related info. I&amp;rsquo;ve also included an option to filter by price (although this is something that can also be done through the URL). The code is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scrap_idealista&lt;/span>(max_price):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver &lt;span style="color:#f92672">=&lt;/span> initialize_driver(IDEALISTA_URL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scroll_down_and_up(driver)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Be kind and accept the cookies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_id(&lt;span style="color:#e6db74">&amp;#39;didomi-notice-agree-button&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span> &lt;span style="color:#75715e"># No cookies button, no problem!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Find each flat element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements &lt;span style="color:#f92672">=&lt;/span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//*[@id=&amp;#34;main-content&amp;#34;]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> items &lt;span style="color:#f92672">=&lt;/span> elements&lt;span style="color:#f92672">.&lt;/span>find_elements_by_class_name(&lt;span style="color:#e6db74">&amp;#39;item-multimedia-container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the link for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;./div/a[@href]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> link&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the price for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>search(&lt;span style="color:#e6db74">&amp;#39;.*&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">n(.*)€\/mes&amp;#39;&lt;/span>, item&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price_str &lt;span style="color:#f92672">=&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price &lt;span style="color:#f92672">=&lt;/span> int(price_str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> price &lt;span style="color:#f92672">&amp;lt;=&lt;/span> max_price:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>append({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>: link,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;price&amp;#39;&lt;/span>: price,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>screenshot_as_png,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image_name&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>id &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.png&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>quit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> flat_list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Overall, it&amp;rsquo;s quite straightforward to comprehend. First and foremost, the Selenium driver is loaded, and the page is scrolled through entirely. Initially, the web page is loaded to have everything ready to start the search. The scrolling is done because, sometimes, results are loaded as you scroll, so performing a quick scroll before extracting information ensures that all results are actually loaded.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">initialize_driver&lt;/span>(url):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver &lt;span style="color:#f92672">=&lt;/span> webdriver&lt;span style="color:#f92672">.&lt;/span>Chrome(executable_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./chromedriver.exe&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>get(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>set_window_position(&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>set_window_size(&lt;span style="color:#ae81ff">1920&lt;/span>, &lt;span style="color:#ae81ff">1080&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> driver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using Selenium is quite straightforward. In this case, I&amp;rsquo;m using the Chrome driver, which I have right in my directory for convenience. After that, I load the URL and set up the window to have a decent size. This is important because elements will be positioned differently depending on the window size. Responsive design is great, but it&amp;rsquo;s one of the worst enemies of a scraper. So, setting a consistent resolution is important to consistently obtain the same results.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scroll_down_and_up&lt;/span>(driver):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#39;window.scrollTo(0, document.body.scrollHeight);&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#39;window.scrollTo(0, 0);&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Regarding scrolling, there&amp;rsquo;s nothing special here. Just a bit of JS and we&amp;rsquo;re good to go.&lt;/p>
&lt;p>The real deal comes next. Firstly, accepting cookies to navigate the site smoothly and avoid any oddities. This is where the power of Selenium starts to shine.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_id(&lt;span style="color:#e6db74">&amp;#39;didomi-notice-agree-button&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The element with that ID is selected, in this case a button, and then clicked. The next step is to find the elements with the flat information. Those little cards that appear in a list. Like all elements on a website, they have classes or attributes that identify them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>elements &lt;span style="color:#f92672">=&lt;/span> driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//*[@id=&amp;#34;main-content&amp;#34;]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>items &lt;span style="color:#f92672">=&lt;/span> elements&lt;span style="color:#f92672">.&lt;/span>find_elements_by_class_name(&lt;span style="color:#e6db74">&amp;#39;item-multimedia-container&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case, I&amp;rsquo;ve performed searches using XPath and through class names. If you look at the Idealista website, you can extract this information. It will be different on each website. The great thing about Selenium is that it lets you retrieve elements and then search within them. This way, you can proceed step by step until you reach your intended target.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/idealista_scraping.png" alt="Idealista Scrapping" title="Elements to find with Selenium">&lt;/p>
&lt;p>Searching through IDs and classes is simple. Searching through XPath is more complex but very powerful. This process can be simplified with an extension like &lt;a href="https://github.com/trembacz/xpath-finder">xPath Finder&lt;/a>, which allows you to obtain the XPath of any element on a webpage.&lt;/p>
&lt;p>With that, we now have a list of items, which are each of those little cards. At this point, the next step is to extract the information we want to retrieve.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the link for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;./div/a[@href]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> link &lt;span style="color:#f92672">=&lt;/span> link&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get the price for that flat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> re&lt;span style="color:#f92672">.&lt;/span>search(&lt;span style="color:#e6db74">&amp;#39;.*&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">n(.*)€\/mes&amp;#39;&lt;/span>, item&lt;span style="color:#f92672">.&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price_str &lt;span style="color:#f92672">=&lt;/span> result&lt;span style="color:#f92672">.&lt;/span>group(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price &lt;span style="color:#f92672">=&lt;/span> int(price_str)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> price &lt;span style="color:#f92672">&amp;lt;=&lt;/span> max_price:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>append({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>: link,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;price&amp;#39;&lt;/span>: price,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>: item&lt;span style="color:#f92672">.&lt;/span>screenshot_as_png
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are many ways to achieve this. Selenium allows you to extract the element as an image, which can be useful for sending it in that format later. In my case, I extract the apartment as an image (to send it via Telegram), the price (to check that it doesn&amp;rsquo;t exceed the set limit), and the link (to include alongside each image for accessing the apartments I&amp;rsquo;m interested in). The image name allows me to manage the images for sending them through Telegram.&lt;/p>
&lt;p>And that&amp;rsquo;s it, it&amp;rsquo;s that simple. Now, all that&amp;rsquo;s left is to send this information through Telegram.&lt;/p>
&lt;h2 id="part-2-creating-a-telegram-bot">Part 2: creating a Telegram bot&lt;/h2>
&lt;p>Crear un bot de Telegram es tan sencillo como usar &lt;a href="https://t.me/botfather">BotFather&lt;/a>, el bot que te permite crear bots. Tras crear un bot con él, te da un token que es lo que te permite hacer lo que quieras con la API. La creación del bot es trivial, consiste en hablar con el bot.&lt;/p>
&lt;p>Una vez teniendo un token se puede hacer uso del &lt;a href="https://github.com/python-telegram-bot/python-telegram-bot">wrapper para Python&lt;/a> que he mencionado. Instalar con &lt;code>pip&lt;/code> y listo. Del wrapper he utilizado lo siguiente:&lt;/p>
&lt;p>Creating a Telegram bot is as simple as using &lt;a href="https://t.me/botfather">BotFather&lt;/a>, the bot that allows you to create bots. After creating a bot with it, you will receive a token that enables you to interact with the API. Bot creation is straightforward; it involves having a conversation with the bot.&lt;/p>
&lt;p>Once you have a token, you can utilize the &lt;a href="https://github.com/python-telegram-bot/python-telegram-bot">Python wrapper&lt;/a> I mentioned. Install it using pip, and you&amp;rsquo;re all set. From the wrapper, I&amp;rsquo;ve used the following features:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> telegram
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram &lt;span style="color:#f92672">import&lt;/span> Bot, Update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> Updater
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> CallbackContext
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> telegram.ext &lt;span style="color:#f92672">import&lt;/span> CommandHandler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With it, you can instantiate the bot using the obtained token and create callbacks that allow you to easily listen for commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;token.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updater &lt;span style="color:#f92672">=&lt;/span> Updater(token&lt;span style="color:#f92672">=&lt;/span>token, use_context&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher &lt;span style="color:#f92672">=&lt;/span> updater&lt;span style="color:#f92672">.&lt;/span>dispatcher
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logging&lt;span style="color:#f92672">.&lt;/span>basicConfig(format&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">%(asctime)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(name)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(levelname)s&lt;/span>&lt;span style="color:#e6db74"> - &lt;/span>&lt;span style="color:#e6db74">%(message)s&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level&lt;span style="color:#f92672">=&lt;/span>logging&lt;span style="color:#f92672">.&lt;/span>INFO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;start&amp;#39;&lt;/span>, start))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;bilatu&amp;#39;&lt;/span>, bilatu))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>, idealista))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dispatcher&lt;span style="color:#f92672">.&lt;/span>add_handler(CommandHandler(&lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>, fotocasa))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updater&lt;span style="color:#f92672">.&lt;/span>start_polling()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That function is executed when the script starts. I fetch the token from a separate file and create the bot. In the code, you can see that four handlers are created. These are the commands that can be executed with the bot. In this case, they are &lt;code>/start&lt;/code>, &lt;code>/bilatu&lt;/code> (which means &amp;ldquo;search&amp;rdquo; in Basque), &lt;code>/idealista&lt;/code>, and &lt;code>/fotocasa&lt;/code>. This way, you can search in all sources or just in a specific one. The functions called with the callbacks are the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">bilatu&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">idealista&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">fotocasa&lt;/span>(update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scrap(update, context, &lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">scrap&lt;/span>(update: Update, context: CallbackContext, site):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_initial_message(context, update)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_price &lt;span style="color:#f92672">=&lt;/span> get_max_price(context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> site &lt;span style="color:#f92672">in&lt;/span> { &lt;span style="color:#e6db74">&amp;#39;idealista&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_idealista(max_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> site &lt;span style="color:#f92672">in&lt;/span> { &lt;span style="color:#e6db74">&amp;#39;fotocasa&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;all&amp;#39;&lt;/span> }:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_fotocasa(max_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_results(flat_list, update, context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_final_message(context, update)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_initial_message&lt;/span>(context, update):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Emaidazu minutu bat!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_final_message&lt;/span>(context, update):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Hortxe dauzkazu!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Essentially, different scraping functions are called based on the executed callback. The &lt;code>context&lt;/code> and &lt;code>update&lt;/code> objects allow you to obtain the bot instance and all the information related to the executed commands (which user executed them, in which chat, group or channel, whether arguments were provided, etc.). In this part, you can also see how simple it is to send a message with a bot using the &lt;code>bot.send_message()&lt;/code> function.&lt;/p>
&lt;p>The interesting part of this section is the &lt;code>send_results()&lt;/code> function, which takes the output generated by the scraping functions (the list of apartments, each with all the mentioned information) and sends it via Telegram.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_results&lt;/span>(flat_list: list, update: Update, context: CallbackContext):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> flat &lt;span style="color:#f92672">in&lt;/span> flat_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context&lt;span style="color:#f92672">.&lt;/span>bot&lt;span style="color:#f92672">.&lt;/span>send_photo(chat_id&lt;span style="color:#f92672">=&lt;/span>update&lt;span style="color:#f92672">.&lt;/span>effective_chat&lt;span style="color:#f92672">.&lt;/span>id, caption&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>], photo&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This part is also quite straightforward. To send a message, you just need to indicate the chat ID (which is something received in the callbacks to know where the command was called from) and the content you want to send. As seen before, you can send a message with bot.send_message() by providing the chat and the text. In this case, you send the photo of each apartment with bot.send_photo(), specifying the collected image in the photo parameter and the link in the caption parameter.&lt;/p>
&lt;p>With all of this, it&amp;rsquo;s as simple as running it and starting to search for apartments.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/telegram_bot.png" alt="Telegram Bot" title="Telegram bot searching for flats">&lt;/p>
&lt;p>As it is, it seems quite elegant to me. Taking the entire element as an image allows you to see all the information at a glance, and including the link provides access to the listing for more details or direct contact with the landlord. Another option could have been to capture the text and create a list of apartments with their links, but the first approach appears to be one of the most elegant and certainly the simplest of them all.&lt;/p>
&lt;h2 id="part-3-creating-a-telegram-channel-to-send-the-info-to-it">Part 3: creating a Telegram channel to send the info to it&lt;/h2>
&lt;p>Sí, con esto no tengo suficiente. Escribir un comando al bot es demasiado trabajo. Por ello, a parte de tener el bot así, he añadido un metodo para que el bot, cada cierto tiempo, escriba en un canal las ofertas que hay. Esto es basicamente lo msimo que hace por ejemplo el &lt;a href="https://t.me/getmanfred">bot de Manfred&lt;/a> con las ofertas de trabajo, pero con mayor frecuencia. Además, me gusta como en ese bot no va dejando los mensajes de días anteriores, sino que solo está el último mensaje. Así evita que se llene el canal de mierda y deja que haya solo lo que tiene que haber. Por ello, yo lo he hecho igual.&lt;/p>
&lt;p>That is not enough for me. Typing a command to the bot is too much effort. That&amp;rsquo;s why, in addition to having the bot set up this way, I&amp;rsquo;ve added a method for the bot to periodically post offers in a channel. Essentially, this is similar to what, for instance, the &lt;a href="https://t.me/getmanfred">Manfred bot&lt;/a> does with job offers, but with higher frequency. Moreover, I like how that bot doesn&amp;rsquo;t leave messages from previous days; only the latest message remains. This prevents the channel from getting cluttered and keeps only the necessary content. Thus, I&amp;rsquo;ve implemented it the same way.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">update_channel&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Get channel and bot info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;token.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> token &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;channel_id.txt&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> channel_id &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot &lt;span style="color:#f92672">=&lt;/span> telegram&lt;span style="color:#f92672">.&lt;/span>Bot(token&lt;span style="color:#f92672">=&lt;/span>token)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Remove previously sended messages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;sent_messages.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> line &lt;span style="color:#f92672">in&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>readlines():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(int(line))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> stacked_messages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot&lt;span style="color:#f92672">.&lt;/span>delete_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, message_id&lt;span style="color:#f92672">=&lt;/span>stacked_messages&lt;span style="color:#f92672">.&lt;/span>pop())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Scrap all with the defaul top price&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_idealista(top_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flat_list&lt;span style="color:#f92672">.&lt;/span>extend(scrap_fotocasa(top_price))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Send the messages with the info&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Saves the message_id of the messages to be able to delete them on the next one&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Kaixo! Hamen dauzkazu oraintxe bertan dauden pisuak:&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> flat &lt;span style="color:#f92672">in&lt;/span> flat_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_photo(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, caption&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;link&amp;#39;&lt;/span>], photo&lt;span style="color:#f92672">=&lt;/span>flat[&lt;span style="color:#e6db74">&amp;#39;image&amp;#39;&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stacked_messages&lt;span style="color:#f92672">.&lt;/span>append(bot&lt;span style="color:#f92672">.&lt;/span>send_message(chat_id&lt;span style="color:#f92672">=&lt;/span>channel_id, text&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Hortxe dauzkazu!&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>message_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;sent_messages.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> message &lt;span style="color:#f92672">in&lt;/span> stacked_messages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(str(message) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I know, this is not the cleanest thing you&amp;rsquo;ve seen in your life. It&amp;rsquo;s basically more of the same but managing the messages that have been sent. Each sent message has a &lt;code>message_id&lt;/code>, which is what allows later to be able to delete them. This function basically deletes whatever has been written before in the channel, scrapes the information, sends the information, and saves the &lt;code>message_id&lt;/code> to be able to delete the messages next time. It saves those IDs in a file so that, if the bot crashes, they won&amp;rsquo;t be lost and can be deleted when it&amp;rsquo;s restarted, thus not leaving garbage in the channel.&lt;/p>
&lt;p>In this case, it&amp;rsquo;s necessary to create an instance of &lt;code>Bot&lt;/code> since it&amp;rsquo;s not received from anywhere. In addition to this, it&amp;rsquo;s necessary to have the ID of the chat or channel where you want to write. There are many bots that allow you to obtain those IDs.&lt;/p>
&lt;p>The idea is to have the script running 24/7 and, in this way, the bot is always ready. On one hand, with the handlers listening, which is done with &lt;code>updater.start_polling()&lt;/code> as seen before. On the other hand, there needs to be a way to execute the &lt;code>update_channel()&lt;/code> function periodically. For this, we can use &lt;code>schedule&lt;/code>, a library that allows you to schedule tasks easily. To install it, use &lt;code>pip&lt;/code> and you&amp;rsquo;re done.&lt;/p>
&lt;p>To use it to execute &lt;code>update_channel()&lt;/code> at certain intervals, just add the following at the end of the &lt;code>init()&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>hour&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(update_channel)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedule&lt;span style="color:#f92672">.&lt;/span>run_pending()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, it&amp;rsquo;s very straightforward to use and the code explains itself. There&amp;rsquo;s no need to worry about the &lt;code>while True&lt;/code> loop. The polling of callbacks runs in separate threads, so this doesn&amp;rsquo;t interfere. This keeps it indefinitely checking whether it needs to launch any tasks.&lt;/p>
&lt;p>With all of this in place, all that&amp;rsquo;s left is to let it run somewhere. These kinds of things are perfect for a Raspberry Pi or something similar. It can also be set up on a VPS or wherever suits. The only thing to keep in mind is that it either needs a display or some library like the one mentioned to emulate it. Additionally, the browser that will be used must be installed.&lt;/p>
&lt;p>You can also add more websites for scraping, it&amp;rsquo;s easily scalable. In my case, I use Idealista and Fotocasa, but you can simply add more scraping functions. Obviously, how you retrieve the information will vary from site to site.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>Creating a bot of this kind is a straightforward task, as you can see. The real challenge, however, lies in finding a decent flat that doesn&amp;rsquo;t cost an arm and a leg. That&amp;rsquo;s where the true difficulty lies.&lt;/p>
&lt;p>Developing a bot to retrieve updated information can be very useful. Using web scraping instead of APIs has its advantages. First and foremost, most websites don&amp;rsquo;t offer APIs, so in those cases, there&amp;rsquo;s no other option. Even in cases where APIs are available, they might have limitations. The beauty of web scraping is that it allows you to gather &lt;strong>exactly what you want, in the way you want it&lt;/strong>. And let no one deceive you; as long as you&amp;rsquo;re not hammering the website or extracting data massively, there&amp;rsquo;s no wrongdoing here.&lt;/p>
&lt;p>I hope I&amp;rsquo;ve explained myself well and that if you&amp;rsquo;re reading this, it sparks your curiosity to tinker with these topics. As for me, I&amp;rsquo;m not going to stop exploring :)&lt;/p>
&lt;p>Lastly, here&amp;rsquo;s the &lt;a href="https://github.com/ander94lakx/pisu-bot">GitHub repository&lt;/a> with the complete code. As always, feel free to do whatever you want with it.&lt;/p>
&lt;p>And remember: &lt;em>&lt;strong>Scraping is not a crime!&lt;/strong>&lt;/em>&lt;/p></content></item><item><title>Pwnkit: Vulnerability in Polkit (CVE-2021-4034) in 5 minutes</title><link>https://ander94lakx.github.io/blog/2022-01-29-polkit/</link><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-01-29-polkit/</guid><description>Another new CVE that has been making headlines. The CVE-2021-4034 was released a few days ago and has spread like wildfire. I can&amp;rsquo;t really contribute much more to the topic that hasn&amp;rsquo;t already been said, but it might be good to give a brief overview of the CVE and how to exploit it (which is trivial).
What is polkit? Polkit is a tool for controlling privileges on Unix-like systems. It can control how unprivileged processes communicate with privileged processes.</description><content>&lt;p>Another new CVE that has been making headlines. The &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4034">CVE-2021-4034&lt;/a> was released a few days ago and has spread like wildfire. I can&amp;rsquo;t really contribute much more to the topic that hasn&amp;rsquo;t already been said, but it might be good to give a brief overview of the CVE and how to exploit it (which is trivial).&lt;/p>
&lt;h2 id="what-is-polkit">What is polkit?&lt;/h2>
&lt;p>&lt;a href="https://wiki.archlinux.org/title/Polkit">Polkit&lt;/a> is a tool for controlling privileges on Unix-like systems. It can control how unprivileged processes communicate with privileged processes.&lt;/p>
&lt;p>This is useful because there are many cases where a process needs to interact with privileged processes only for certain actions, but not for other ones. Instead of using something like sudo (which would be like &amp;ldquo;open all the doors and see what happens&amp;rdquo;), with Polkit you can control this kind of operations in more detail.&lt;/p>
&lt;h2 id="what-is-the-vulnerability">What is the vulnerability?&lt;/h2>
&lt;p>Polkit has a utility called &lt;a href="https://linux.die.net/man/1/pkexec">pkexec&lt;/a>. This utility allows to execute commands as another user or as root. This utility has a vulnerability, as it does not properly parse the number of parameters it receives and allows environment variables to be executed as commands (!).&lt;/p>
&lt;p>Then, depending on what is passed as environment variables, arbitrary code can be executed. From there, you can escalate privileges and get admin permissions, i.e. root.&lt;/p>
&lt;h2 id="how-can-the-vulnerability-be-exploited">How can the vulnerability be exploited?&lt;/h2>
&lt;p>Obviously, there are already exploits for this. To see how easy it is, you can use [Davide Berardi]&amp;rsquo;s exploit (&lt;a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034&lt;/a>) as an example. Testing it is as easy as clone, compile, run and win!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/berdav/CVE-2021-4034
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./cve-2021-4034
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And &lt;em>voilà&lt;/em>! there you have the root shell.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/polkit-exploit.png" alt="Polkit exploit" title="Polkit exploit">&lt;/p>
&lt;h2 id="which-systems-are-vulnerable">Which systems are vulnerable?&lt;/h2>
&lt;p>Well, I would say practically all of them. The vulnerability has been &lt;a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">successfully exploited&lt;/a> in default installations of Ubuntu, Debian, Fedora, CentOS and many more distributions. After all, it is a component found in practically all Unix-like distributions.&lt;/p>
&lt;p>The worst thing is not only that, but that the vulnerability has been in the code for &lt;a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/c8c3d835d24fc4ce5a9c596c7d55d85a0311e8d1">more than 12 years&lt;/a> (!). For me, personally, this is the part that scares me about this kind of vulnerability, the ones that have been open to exploitation for a long time, because I don&amp;rsquo;t know to what extent they have been exploited previously.&lt;/p>
&lt;h2 id="how-to-mitigate-the-vulnerability">How to mitigate the vulnerability?&lt;/h2>
&lt;p>Everyone&amp;rsquo;s been doing their best to patch it, so at this point, updating via the package manager should be enough to mitigate it.&lt;/p>
&lt;p>In the same exploit repo that I have shown there is a version just to test if you are vulnerable, which can be tested as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make dry-run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dry-run/dry-run-cve-2021-4034
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another option, in case of the system could not be updated (bad idea by the way, you should always keep your systems up to date), could be to disable the SUID bit of pkexec. A &lt;code>chmod&lt;/code> to remove the bit for everyone:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod ug-s /bin/pkexec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This prevents the exploit from escalating privileges, although it can have many unforeseen consequences (as in Half Life :)).&lt;/p>
&lt;h2 id="conlusions">Conlusions&lt;/h2>
&lt;p>To summarise, here are a few points that come to mind after seeing a vulnerability of this type:&lt;/p>
&lt;ul>
&lt;li>Be careful with your inputs, especially in languages like C and when dealing with lower level elements.&lt;/li>
&lt;li>You can never be completely sure. There are always vulnerabilities that we don&amp;rsquo;t know about but can be discovered by others.&lt;/li>
&lt;li>The more people are on the side of the good guys, the more such vulnerabilities can be discovered, and faster.
&lt;ul>
&lt;li>Imagine the consequences of this falling into the wrong hands (and I&amp;rsquo;m not just talking about cybercriminals ;)).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>So you know, update your systems!&lt;/p>
&lt;p>Happy hacking!&lt;/p>
&lt;h2 id="i-want-more-details">I want more details!&lt;/h2>
&lt;p>Well, here they are:&lt;/p>
&lt;ul>
&lt;li>The &lt;a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">original report&lt;/a>.&lt;/li>
&lt;li>Article in &lt;a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">his blog&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>PS&lt;/em>: I would explain the vulnerability in detail, but I think it&amp;rsquo;s already very well explained in hundreds of articles and videos, and I&amp;rsquo;m not going to think I&amp;rsquo;m better than them. My goal here was simply to make a brief summary of a vulnerability that I found interesting.&lt;/p></content></item><item><title>Malware analysis (I) - How to get started in malware analysis</title><link>https://ander94lakx.github.io/blog/2022-01-26-malware-analysis-1/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2022-01-26-malware-analysis-1/</guid><description>We are living in a world full of malware. Everyone has had a problem with some kind of virus or at least knows someone who has, and everyone knows or works in a company that has been attacked using some kind of malware.
Personally, I find malware fascinating. What fascinates me about it is how effective they are. They are carefully designed to do their job and there are such sophisticated examples that it is amazing to see how someone could have thought of programming something in such a way to exploit a vulnerability or to use certain kinds of evasion mechanisms.</description><content>&lt;p>We are living in a world full of malware. Everyone has had a problem with some kind of virus or at least knows someone who has, and everyone knows or works in a company that has been attacked using some kind of malware.&lt;/p>
&lt;p>Personally, I find malware fascinating. What fascinates me about it is how effective they are. They are carefully designed to do their job and there are such sophisticated examples that it is amazing to see how someone could have thought of programming something in such a way to exploit a vulnerability or to use certain kinds of evasion mechanisms.&lt;/p>
&lt;p>Whenever I see news of a new ransomware, trojan or malware of some kind, I am curious to know how it works. I often skim through the technical reports that come out of the most publicised attacks in search of more information, and I&amp;rsquo;m often blown away by the analysts&amp;rsquo; reports. Partly because of the characteristics of the cases they analyse and the ways in which the malware works, but also because of how they are able to obtain all this information.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/wannacry.png" alt="Wannacry" title="Wannacry in action">&lt;/p>
&lt;p>These types of reports are made by malware analysts. Sometimes they are within a company&amp;rsquo;s DFIR teams, sometimes they are government or military organisations, and sometimes it is a random hacker posting on his blog about a sample he is playing with. What is clear is that they take a malware sample and analyse it. It&amp;rsquo;s a fascinating field that really catches my attention because it mixes different fields that I find very interesting. It mixes computer forensics with reverse engineering and low-level knowledge of systems. It&amp;rsquo;s like the perfect combo plate.&lt;/p>
&lt;p>Lately I&amp;rsquo;ve been learning about this area. I even did &lt;a href="https://github.com/ander94lakx/TFM_Doc">my Master Thesis&lt;/a> about it not long ago. In order to collect the interesting things I&amp;rsquo;ve been learning, I&amp;rsquo;ve decided to write a series of posts (and thus take over this blog a bit) about the process and some of the techniques that are used. I&amp;rsquo;m not an expert on the subject, but I hope to be able to help anyone who reads it and, why not, to help myself in organising my ideas.&lt;/p>
&lt;h2 id="what-is-malware-analysis">What is malware analysis?&lt;/h2>
&lt;p>Malware analysis consists of all those techniques and procedures that provide information about how malware works. The behaviour of any program, and therefore also of malware, depends on its code. If you have the original source code of a malware sample, you can simply look at it to find out how it works. No such luck in this case. The best you can have is some kind of obfuscated or compiled code, usually a binary.&lt;/p>
&lt;p>There are many types of malware. Malware can be that bit of JavaScript that has snuck onto that website with the aim of mining crypto for someone and, in return, turning your computer into a heater. Malware can also be that .exe that has been slipped in as an activator for your cracked Office. Depending on the type of malware, it is analysed in one way or another.&lt;/p>
&lt;p>In this case, I am going to focus on malware for Windows and for x86 and x86_64 architectures. If you think of malware examples, examples for x86 and x86_64 are probably the most common ones that come to mind, and they are the most common ones to find.&lt;/p>
&lt;p>In essence, analysing malware is about understanding how a program works, but without having its original source code. It is like having a black box and trying to understand how it works: you can open its guts to try to get the code out, you can launch it and see how it interacts within a system, or you can take and analyse the shape of the box to get clues about it.&lt;/p>
&lt;h2 id="what-do-you-do-to-analyse-malware">What do you do to analyse malware?&lt;/h2>
&lt;p>There are different processes and techniques for analysing malware. There are even processes and methodologies that can be followed that standardise how to do it. Even so, analysing malware consists, in essence, of extracting information about it: how it works, what mechanisms it has to evade, how and with whom it communicates, what mechanisms it uses to persist or spread, etc.&lt;/p>
&lt;p>The techniques used to extract this information are diverse, but all of them can be broadly divided into the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Static analysis&lt;/strong>: this consists of analysing information about the malware without analysing its code or executing it: metadata, signatures, format and sections of the binary, etc.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/pe-bear.png" alt="PE-bear" title="Static analysis with PE-bear">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dynamic analysis**: also called behavioural analysis, it consists of analysing the sample while it is running: files with which it interacts, system calls, network traffic, changes in the registry, etc.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/wireshark.png" alt="Wireshark" title="Capturing network traffic with Wireshark">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>Code analysis&lt;/em>: as the name suggests, it consists of looking at the code and there are two types:&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ghidra.png" alt="Ghidra" title="Ghidra for code analysis">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Static code analysis&lt;/strong>: analyse the code without executing it.&lt;/li>
&lt;li>&lt;strong>Dynamic code analysis&lt;/strong>: analyse the code while it is being executed, i.e. debug it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>As can be seen, the static part is all about analysing without executing, while the dynamic part needs the malware running. A distinction can also be made between techniques depending on whether the code is analysed or not. When analysing a sample, some types of tasks are usually performed before others. Static analysis techniques are usually easy to perform and are usually done at the beginning. Analysing the code, on the other hand, is a tedious task and is usually done later on, although this can vary depending on many things.&lt;/p>
&lt;h2 id="how-do-i-start">How do I start?&lt;/h2>
&lt;p>There is no doubt here, to analyse malware you need an isolated environment. Taking malware and putting it on your computer to start tinkering with it is a bad idea. No one wants to have malware sneaking onto their computer.&lt;/p>
&lt;p>The best way to have an isolated environment is to use a virtual machine. You can use whatever you want (VirtualBox, VMWare, &amp;hellip;). In my case I&amp;rsquo;m more of a VirtualBox user, but any of them is perfectly valid. Once you have the virtualization software, you need to create an ISO with Windows, create the virtual machine, load the image on&amp;hellip; Or maybe not?&lt;/p>
&lt;p>You can find the ISO yourself, create the machine and install Windows on it, but there is an easier way to get a Windows VM, and that is to download it directly from the internet. The best option is the VMs offered by Microsoft for developers. There are several options. You can opt for a machine that has a &lt;a href="https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/">full development environment&lt;/a> (it&amp;rsquo;s bigger, but if you also want to use it to develop malware it can be fine), or the virtual machines that have &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/">for application testing&lt;/a> in Edge, which are lighter and, in my opinion, the best option. Of the latter, in addition to Windows 10, there are also versions for Windows 7 and Windows 8, which for older malware can be interesting. There are versions for the most famous virtualization software, such as VirtualBox or VMWare, so selecting the desired version, downloading the file and loading it into the required virtualization software is more than enough.&lt;/p>
&lt;h3 id="what-tools-do-i-need">What tools do I need?&lt;/h3>
&lt;p>With a virtual machine ready, the only thing left to do is to set it up with the necessary tools to analyse malware. There are a large number of tools for analysing malware. Some like IDA or Ghidra will sound familiar to many. At the beginning it is normal to have no idea which ones to install. The best thing to do in these cases is to make use of &lt;a href="https://github.com/mandiant/flare-vm">FLARE-VM&lt;/a>, a tool to install and keep up to date a whole set of malware scanning tools.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/flare-install.png" alt="Flare install" title="FLARE-VM installation process">&lt;/p>
&lt;p>Using this tool on our machine and leaving it for a while to install everything, we will have a machine with all the tools we need. It is the best option, above all, to test all kinds of tools and, in the future, be able to create your own lab only with the tools you like. The only disadvantage of using something like FLARE-VM is that it will increase the size of your VM considerably (about 60GB of VMs). Other than that, it&amp;rsquo;s as easy as following the &lt;a href="https://github.com/mandiant/flare-vm#windows-10-installation">installation steps&lt;/a> indicated in its repository.&lt;/p>
&lt;p>There are also other tools or distributions that come with everything ready to use. One of my favourites is &lt;a href="https://remnux.org/">Remnux&lt;/a>, a linux distribution that comes with practically everything. It even has tools to scan for Windows malware. The only problem it has for scanning Windows malware is that we won&amp;rsquo;t be able to run it on that machine. Still, highly recommended as well.&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/remnux.png" alt="Remnux" title="Remnux distro">&lt;/p>
&lt;p>If you still want to install the tools manually, here are some of the tools that I like. There are many more, and this depends on preferences and needs, but for me, some of the ones I like are:&lt;/p>
&lt;ul>
&lt;li>For static analysis:
&lt;ul>
&lt;li>&lt;a href="https://www.winitor.com/">PEstudio&lt;/a> and &lt;a href="https://github.com/horsicq/Detect-It-Easy">DIE&lt;/a> for binary analysis.&lt;/li>
&lt;li>&lt;a href="https://ssdeep-project.github.io/ssdeep/index.html">ssdeep&lt;/a> and &lt;a href="https://virustotal.github.io/yara/">YARA&lt;/a> (and &lt;a href="https://github.com/Yara-Rules/rules">Yara-Rules&lt;/a>) to classify and search for similar malware.&lt;/li>
&lt;li>&lt;a href="https://github.com/mandiant/capa">capa&lt;/a> to get at-a-glance clues about the capabilities of a sample.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For code analysis:
&lt;ul>
&lt;li>&lt;a href="https://hex-rays.com/ida-free/">IDA&lt;/a> for reversing and analysing code.&lt;/li>
&lt;li>&lt;a href="https://ghidra-sre.org/">Ghidra&lt;/a> for when you can&amp;rsquo;t decompile samples in IDA because you don&amp;rsquo;t have thousands of euros to spend.&lt;/li>
&lt;li>&lt;a href="https://x64dbg.com/">x64dbg&lt;/a> for &lt;del>cracking video games&lt;/del> debugging samples.
&lt;ul>
&lt;li>It improves a lot with &lt;a href="https://github.com/x64dbg/ScyllaHide">ScyllaHide&lt;/a> and &lt;a href="https://github.com/ThunderCls/xAnalyzer">xAnalizer&lt;/a>, two indispensable plugins.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For behavioural analysis:
&lt;ul>
&lt;li>&lt;a href="https://processhacker.sourceforge.io/">Process Hacker&lt;/a> and the Windows &lt;a href="https://docs.microsoft.com/en-us/sysinternals/">SysInternals&lt;/a>, especially &lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon">Process Monitor&lt;/a> to be able to monitor and analyse processes and system events.
&lt;ul>
&lt;li>Process Monitor PMLs are your best ally.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://sourceforge.net/projects/regshot/">Regshot&lt;/a> to capture and compare registry changes.&lt;/li>
&lt;li>&lt;a href="https://www.wireshark.org/">Wireshark&lt;/a> to capture and analyse network traffic.&lt;/li>
&lt;li>&lt;a href="https://belkasoft.com/es/bat">Belkasoft Acquisition Tool&lt;/a> for memory dumps.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Others:
&lt;ul>
&lt;li>&lt;a href="https://mh-nexus.de/en/hxd/">HxD&lt;/a> as a hex editor.&lt;/li>
&lt;li>A cup of coffee on the side.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-next">What next?&lt;/h2>
&lt;p>With everything ready and prepared, all that remains is to find a sample to start playing with. In order not to get too overwhelmed, it is best to opt for malware samples that have already been analysed and are not too complex. Repositories such as &lt;a href="https://github.com/ytisf/theZoo">TheZoo&lt;/a> have famous malware samples. You can also search for specific ones on platforms such as &lt;a href="https://bazaar.abuse.ch/">MalwareBazaar&lt;/a>.&lt;/p>
&lt;p>Another option is to test such tools and techniques with crackmes. A crackme is the equivalent of a Hack The Box or TryHackMe machine but for reverse engineering. They are not specific to analysing malware, but the techniques used are essentially the same. Websites like &lt;a href="https://crackmes.one/">crackmes.one&lt;/a> have many crackmes of varying difficulty to practice with.&lt;/p>
&lt;p>In the next posts I will explain some of these techniques on a real malware sample to see how the different techniques are applied and how to use the different tools.&lt;/p>
&lt;p>Happy hacking!&lt;/p>
&lt;h1 id="more-posts">More posts&lt;/h1>
&lt;ul>
&lt;li>Malware analysis (I) - How to get started in malware analysis&lt;/li>
&lt;li>&lt;a href="../2022-09-11-malware-analysis-2">Malware analysis (II) - Basic static analysis: strings and metadata&lt;/a>&lt;/li>
&lt;li>&lt;a href="../2022-09-18-malware-analysis-3">Malware analysis (III) - Static analysis: PE32 binary format, entropy and obfuscation technique indicators&lt;/a>&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul></content></item><item><title>How to download images from an Instagram profile with Python and web scrapping</title><link>https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/</link><pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2020-04-25-instagram-bot-python/</guid><description>Instagram is the social network to showing off. It&amp;rsquo;s probably the social network I use the most. I&amp;rsquo;m too young to actively use Facebook and too old to even consider creating TikTok (if you see it happening, I give you permission to kill me). I also use twitter, but more as a &amp;ldquo;news&amp;rdquo; provider, but I don&amp;rsquo;t post anything on that one.
So all my posts tend to go to Instagram.</description><content>&lt;p>Instagram is the social network to showing off. It&amp;rsquo;s probably the social network I use the most. I&amp;rsquo;m too young to actively use Facebook and too old to even consider creating TikTok (if you see it happening, I give you permission to kill me). I also use twitter, but more as a &amp;ldquo;news&amp;rdquo; provider, but I don&amp;rsquo;t post anything on that one.&lt;/p>
&lt;p>So all my posts tend to go to Instagram. Over the years I have found that it has become a kind of personal milestone diary. Above the photos from my travels you might see photos from when I got my degree, from when I lived in Madrid and was in a videogame studio as a game programmer, or from good times with friends. Although the quality of the images may not be the best, I like to go there from time to time and see all those trips and moments.&lt;/p>
&lt;p>Still, I&amp;rsquo;m a techie and I know that the only way to keep your information safe is to have a copy of it safe by yourself. So I&amp;rsquo;ve been thinking for a while about making a script that would allow me to download all my profile pictures. I could also use this to refresh a bit my Python knowledge and practice some web scraping.&lt;/p>
&lt;h1 id="web-scrapping-with-selenium">Web Scrapping with Selenium&lt;/h1>
&lt;p>Some time ago I tried to implement i, and failed, mainly because I tried to download, parse and search the pages manually. The problem is that a web page does not consist only of a single HTML resource, and doing it by hand implies getting all the resources that make up a page. So I put it aside. That was until the other day, when by chance I found a &lt;a href="https://www.youtube.com/watch?v=d2GBO_QjRlo">video&lt;/a> in which someone programmed a bot for Instagram to see the people who had unfollowed him. I didn&amp;rsquo;t care about the followers, but I wanted to see how he did it.&lt;/p>
&lt;p>When I saw how he did it I saw that he was using a library called &lt;a href="https://www.selenium.dev/">Selenium&lt;/a>, which is a tool that allows you to automate actions inside a browser, mainly to automate functional test and things like that. For me, libraries like that are basically the holy grail of Web Scrapping, it saves you all the hassle of making the requests, filtering the pages, searching for tags, etc. So I downloaded the WebDriver for Firefox (it&amp;rsquo;s the bridge between the library and the browser), installed the Python library and based on the video I started programming.&lt;/p>
&lt;h1 id="log-in-on-instagram">Log in on Instagram&lt;/h1>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ig-login.png" alt="Instagram login website">&lt;/p>
&lt;p>The first thing to do is to log in to the page. To do this, we need to do the following:&lt;/p>
&lt;ol>
&lt;li>Get the page. As we are not logged in, the page that will appear will be the login page.&lt;/li>
&lt;li>Obtain the user and password fields and fill them.&lt;/li>
&lt;li>Click on the &lt;em>Log in&lt;/em> button.&lt;/li>
&lt;/ol>
&lt;p>All this, done programmatically in Python looks as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">InstaBot&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, username, pw):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver &lt;span style="color:#f92672">=&lt;/span> webdriver&lt;span style="color:#f92672">.&lt;/span>Firefox(executable_path&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;./geckodriver.exe&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>username &lt;span style="color:#f92672">=&lt;/span> username
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>get(&lt;span style="color:#e6db74">&amp;#34;https://instagram.com&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//input[@name=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">username&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>send_keys(username)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//input[@name=&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">password&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>send_keys(pw)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//button[@type=&amp;#34;submit&amp;#34;]&amp;#39;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//button[contains(text(), &amp;#39;Ahora no&amp;#39;)]&amp;#34;&lt;/span>)\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As can be seen, I&amp;rsquo;ve put the code in the constructor of a class, which is the class where I&amp;rsquo;m going to implement everything. It is in the constructor because, whatever you want to do, you always need to login. The &lt;code>sleep()&lt;/code> is necessary because the page needs time to load.&lt;/p>
&lt;p>If you run that, you will see that it is the same process that anyone would do to log into Instagram, but automated. You will even be able to see it live in the isolated browser that opens the WebDriver. I&amp;rsquo;m not going to dig into each function, as I think the names are pretty self-explanatory and it&amp;rsquo;s easy to understand what each one is doing.&lt;/p>
&lt;h1 id="get-all-instagram-posts">Get all Instagram posts&lt;/h1>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/ig-posts.png" alt="Instagram posts">&lt;/p>
&lt;p>After that, my idea was to go to the profile page, grab each link to each post and from each one grab the URL where the image is located. I&amp;rsquo;ve already done it manually, so I know that Instagram images can be grabbed by inspecting the HTML for the URL of the image, the URL of a post is usually something like this, which is in the &lt;code>&amp;lt;img&amp;gt;&lt;/code> tag nested by several &lt;code>&amp;lt;div&amp;gt;&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://ander94lakx.github.io/static/images/g-image-post-url.png" alt="URL of the image of an Instagram post">&lt;/p>
&lt;p>But before we get to that, we need to grab the links to all the posts, so we can find the image link for each of them. The links of an Instagram post have the format &lt;code>https://www.instagram.com/p/B--N-oBKdPL/&lt;/code>. To get them, once you get to the profile page, we have to scroll down and look for these links.&lt;/p>
&lt;p>My initial idea was to scroll all the way down and then look for all the links. The problem is that the profile page only keeps a certain number of posts loaded in the page and, as you scroll down and load new ones, the previous ones disappear. In my experience, it usually keeps around 30 posts loaded. Therefore, what should be done is to scroll down and get the links. To do this I have created the function &lt;code>get_pictures_links()&lt;/code>, which contains the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_pictures_links&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#34;//a[contains(@href,&amp;#39;/&lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;)]&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(self&lt;span style="color:#f92672">.&lt;/span>username))\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>click()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_height &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;return document.body.scrollHeight&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;window.scrollTo(0, document.body.scrollHeight);&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links_elements &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_elements_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//a[contains(@href,&amp;#34;p/&amp;#34;)]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> elem &lt;span style="color:#f92672">in&lt;/span> links_elements:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links&lt;span style="color:#f92672">.&lt;/span>append(elem&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;href&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_height &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>execute_script(&lt;span style="color:#e6db74">&amp;#34;return document.body.scrollHeight&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> new_height &lt;span style="color:#f92672">==&lt;/span> last_height:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_height &lt;span style="color:#f92672">=&lt;/span> new_height
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> links &lt;span style="color:#f92672">=&lt;/span> list(set(links))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> links
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are several things to note in the above function:&lt;/p>
&lt;ul>
&lt;li>Scrolling is done using JavaScript. To execute JavaScript code on the web, the &lt;code>execute_script()&lt;/code> function is used.&lt;/li>
&lt;li>The height counter is used to know when to stop scrolling down. If it remains in the same position when scrolling as in the previous scroll, it stops.&lt;/li>
&lt;li>To search for links to posts, look for the corresponding &lt;code>&amp;lt;a&amp;gt;&lt;/code> tags. In this case we look for a link tag containing &lt;code>/p&lt;/code> in the &lt;code>href&lt;/code> attribute.
&lt;ul>
&lt;li>Once we have obtained the tag or, as in this case, the list of tags that meet the criteria, we obtain the attributes themselves, which are the URLs we want. These are saved in the list.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Because of the way the grid works, it is normal to end up picking up repeated values, as the tags are unloaded over time, but are kept for several scrolls. Therefore, at the end of the scroll, you do a &lt;code>list(set(links))&lt;/code> to remove duplicates (go to a set, which cannot contain repeats, and then to a list to leave it as before). Doing that leaves the elements out of order, but in this case it doesn&amp;rsquo;t matter. Of the solutions I found on &lt;a href="https://stackoverflow.com/a/7961393">StackOverflow&lt;/a>, that seemed to me to be the cleanest and most adequate for this case.&lt;/li>
&lt;/ul>
&lt;h1 id="get-the-_permalinks_-to-the-images">Get the &lt;em>permalinks&lt;/em> to the images&lt;/h1>
&lt;p>With all the posts, the only thing left to do is to open them one by one and look for the images they contain. To do this, I have created the function &lt;code>get_picture()&lt;/code>, to which I pass each of the links I have previously obtained and look for the image to download it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_picture&lt;/span>(self, link):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>get(link)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sleep(&lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> img_element &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_element_by_xpath(&lt;span style="color:#e6db74">&amp;#39;//img[contains(@class,&amp;#34;FFVAD&amp;#34;)]&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> url &lt;span style="color:#f92672">=&lt;/span> img_element&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;src&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time_element &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>driver&lt;span style="color:#f92672">.&lt;/span>find_elements_by_tag_name(&lt;span style="color:#e6db74">&amp;#39;time&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> time_element[&lt;span style="color:#ae81ff">0&lt;/span>]&lt;span style="color:#f92672">.&lt;/span>get_attribute(&lt;span style="color:#e6db74">&amp;#39;datetime&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> url &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#f92672">and&lt;/span> timestamp &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#f92672">not&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> timestamp&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;:&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamp &lt;span style="color:#f92672">=&lt;/span> timestamp&lt;span style="color:#f92672">.&lt;/span>replace(&lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;-&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(url)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> urllib&lt;span style="color:#f92672">.&lt;/span>request&lt;span style="color:#f92672">.&lt;/span>urlretrieve(url, timestamp &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.jpg&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Ignoring that I don&amp;rsquo;t deal with the exception (and I should), this is where the magic really happens and where there are the most problems. At the moment the easiest way I&amp;rsquo;ve found to get the tag that contains the actual image is to search for it via its class. The names of all the classes used in the HTML of the Instagram website are minimized or obfuscated. But, based on the testing I&amp;rsquo;ve been doing, they don&amp;rsquo;t change over time, so I&amp;rsquo;m using that class name. Once you know how to do it, it&amp;rsquo;s very easy to find the tag with Seleniun and get the URL.&lt;/p>
&lt;p>Also, to save the images I also get the timestamp of when the post was published. From there, you just need to download the image with &lt;code>urllib&lt;/code>.&lt;/p>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>The bot has many parts with room for improvement. So far I haven&amp;rsquo;t talked about posts that contain a video or posts that contain several images. I will improve it over time, but I think that as it stands it is a good way to understand how to do basic web scraping. I&amp;rsquo;m going to leave the code in a &lt;a href="https://github.com/ander94lakx/InstaBot">GitHub repository&lt;/a>, where you will be able to see these improvements.&lt;/p>
&lt;h1 id="what-about-the-instagram-api">What about the Instagram API?&lt;/h1>
&lt;p>At this point, perhaps someone is wondering why do all this and not use Instagram&amp;rsquo;s API directly. On the one hand, I know there is a new API, but I don&amp;rsquo;t know it. My goal is to try to do the same thing that this tool does but with this API. The one I know is the previous API, which I think is limited and will soon be obsolete.&lt;/p>
&lt;p>Still, the goal of this bot is not to depend on whether Instagram is going to allow you to get those images or not. After all, once you&amp;rsquo;re logged into the app, you can technically grab as many images as you want, so you should be able to do it programmatically as well.&lt;/p>
&lt;p>In the end, it&amp;rsquo;s not about whether Instagram will let you do it or not, it&amp;rsquo;s about: if you can, why not?&lt;/p></content></item><item><title>Initial commit</title><link>https://ander94lakx.github.io/blog/2020-04-04-presentation/</link><pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate><author>ander {at} protonmail {dot} com (Ander Granado)</author><guid>https://ander94lakx.github.io/blog/2020-04-04-presentation/</guid><description>I&amp;rsquo;ve been thinking about creating a blog for years. I don&amp;rsquo;t know if it&amp;rsquo;s because I&amp;rsquo;ve been locked up in my house for 3 weeks (and what&amp;rsquo;s left) due to the quarantine and I&amp;rsquo;m quite bored or if it&amp;rsquo;s just that now I&amp;rsquo;m really ready to get down to it, but even so I&amp;rsquo;ve thrown myself into the adventure.
For those who don&amp;rsquo;t know me, my name is Ander Granado. I&amp;rsquo;m a 25-year-old guy from Vitoria-Gasteiz who studied Computer Engineering and works as a software developer.</description><content>&lt;p>I&amp;rsquo;ve been thinking about creating a blog for years. I don&amp;rsquo;t know if it&amp;rsquo;s because I&amp;rsquo;ve been locked up in my house for 3 weeks (and what&amp;rsquo;s left) due to the quarantine and I&amp;rsquo;m quite bored or if it&amp;rsquo;s just that now I&amp;rsquo;m really ready to get down to it, but even so I&amp;rsquo;ve thrown myself into the adventure.&lt;/p>
&lt;p>For those who don&amp;rsquo;t know me, my name is Ander Granado. I&amp;rsquo;m a 25-year-old guy from Vitoria-Gasteiz who studied Computer Engineering and works as a software developer.&lt;/p>
&lt;p>As I said, I&amp;rsquo;m a Computer Engineer and, even before I started studying, I like to tinker with different areas within this field. From programming, either web, desktop, mobile, videogames, scripts or tools of any kind, to any other field such as cybersecurity, hacking, the Linux world and anything related to science and technology in general. I&amp;rsquo;m not only a computer programmer, I also like other things like playing videogames, living attached to my headphones and Spotify, travelling, drinking beer or some social or political matters, among others.&lt;/p>
&lt;p>There are a lot of topics that I like and that I think it can be interesting to talk about, not because I think my words or opinions are worth reading, but because I think it&amp;rsquo;s an interesting way to generate a kind of personal &amp;ldquo;diary&amp;rdquo;. It can also help me to practice my writing and try writing in other languages, such as English or Basque, so don&amp;rsquo;t panic if you see something poorly written in one of those languages. I also want to underline the word &amp;ldquo;personal&amp;rdquo;. This is completely personal, so anything I put here represents only my point of view.&lt;/p>
&lt;p>If you are interested in this blog you may find one of the following three things:&lt;/p>
&lt;ul>
&lt;li>A project abandoned as soon as it starts, by someone who is too lazy to write four fucking lines with any regularity.&lt;/li>
&lt;li>A series of disorganised ramblings by a crazed computer engineer.
&lt;ul>
&lt;li>Some interesting opinions and articles about programming, hacking, systems, science, technology, music or politics.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>It all depends on how lazy I am over the next few months.&lt;/p>
&lt;p>As far as I&amp;rsquo;m concerned, thank you very much for reading me and if you&amp;rsquo;re interested, I have a number of social networks where you can follow me. I have &lt;a href="https://www.instagram.com/andergranado/">Instagram&lt;/a>, where I mainly post pictures of my travels and what I read (very hipster, I know). I also have &lt;a href="https://twitter.com/AnderGrM">Twitter&lt;/a>, which if I haven&amp;rsquo;t abandoned it, is what I use to find out about new things in the development world, follow artists, etc. Finally, although it&amp;rsquo;s not a social network, I have &lt;a href="https://github.com/ander94lakx">GitHub&lt;/a>, where I have uploaded some projects, from old things from university to some little things I&amp;rsquo;m doing (like, for example, this blog).&lt;/p>
&lt;p>Ondo ibili!&lt;/p>
&lt;p>P.S.: The blog is made with &lt;del>Jekyll&lt;/del> &lt;del>Gatsby&lt;/del> Hugo, which I think is a great tool to make a blog like this and to host it with GitHub Pages.&lt;/p>
&lt;p>P.S.2: The name of the blog is just a pretty lame fusion of the name of a Lou Reed song with the word byte.&lt;/p></content></item></channel></rss>